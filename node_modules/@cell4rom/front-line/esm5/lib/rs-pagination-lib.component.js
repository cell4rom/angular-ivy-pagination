/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
/**
 * #### Pagination within API RSET
 *
 * Author : romdhanisamir94\@gmail.com
 */
var RsPaginationLibComponent = /** @class */ (function () {
    function RsPaginationLibComponent(activatedRoute, router) {
        this.activatedRoute = activatedRoute;
        this.router = router;
        this.sizes = [5, 10, 20];
    }
    /**
     * @return {?}
     */
    RsPaginationLibComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    RsPaginationLibComponent.prototype.lastPage = /**
     * @return {?}
     */
    function () {
        this.router.navigate([], {
            relativeTo: this.activatedRoute,
            queryParams: { page: this.pagesNumber },
            queryParamsHandling: "merge"
        });
    };
    /**
     * @return {?}
     */
    RsPaginationLibComponent.prototype.firstPage = /**
     * @return {?}
     */
    function () {
        this.router.navigate([], {
            relativeTo: this.activatedRoute,
            queryParams: { page: 1 },
            queryParamsHandling: "merge"
        });
    };
    /**
     * @return {?}
     */
    RsPaginationLibComponent.prototype.previousPage = /**
     * @return {?}
     */
    function () {
        this.router.navigate([], {
            relativeTo: this.activatedRoute,
            queryParams: { page: --this.page },
            queryParamsHandling: "merge"
        });
    };
    /**
     * @return {?}
     */
    RsPaginationLibComponent.prototype.nextPage = /**
     * @return {?}
     */
    function () {
        this.router.navigate([], {
            relativeTo: this.activatedRoute,
            queryParams: { page: ++this.page },
            queryParamsHandling: "merge"
        });
    };
    /**
     * @return {?}
     */
    RsPaginationLibComponent.prototype.changeSize = /**
     * @return {?}
     */
    function () {
        this.router.navigate([], {
            relativeTo: this.activatedRoute,
            queryParams: { size: this.currentSize },
            queryParamsHandling: "merge"
        });
    };
    RsPaginationLibComponent.decorators = [
        { type: Component, args: [{
                    selector: 'rs-pagination-api',
                    template: "\n  <div *ngIf=\"pagesNumber >= 1\">\n\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<button class='btn btn-info btn-sm m-l-1em' (click)=\"firstPage()\" [disabled]=\"page === 1\"><i class=\"fa fa-angle-double-left\"></i></button>\n\t\t\t\t<button class='btn btn-info btn-sm m-l-1em' (click)=\"previousPage()\" [disabled]=\"page == 1\"><i class=\"fa fa-angle-left\"></i></button>\n\t\t\t\t<span style=\"margin-left: 10px;margin-right: 10px;\">Page {{page}}/{{pagesNumber}}</span> \n\t\t\t\t<span>  </span>\n        <span style=\"margin-left: 10px;margin-right: 10px;\">Size</span>\n\t\t\t\t<select class=\"form-control form-control-sm pageSizeSelectBox\" id=\"currentSize\" name=\"currentSize\" [(ngModel)]=\"currentSize\" (change)=\"changeSize()\">\n\t\t\t\t\t<option *ngFor=\"let size of sizes\" value=\"{{size}}\">{{size}}</option>\n        </select>\n\t\t\t\t<button class='btn btn-info btn-sm m-l-1em' (click)=\"nextPage()\" [disabled]=\"page === pagesNumber\"><i class=\"fa fa-angle-right\"></i></button>\n\t\t\t\t<button class='btn btn-info btn-sm m-l-1em' (click)=\"lastPage()\" [disabled]=\"page === pagesNumber\"><i class=\"fa fa-angle-double-right\"></i></button>\n\t\t\t</div>\n\t</div>\n</div>\n  ",
                    styles: ["\n  .m-l-1em { \n    margin-left:1em; \n    width: 25px;\n  }\n  \n  .pageSizeSelectBox {\n    display: -webkit-inline-box;\n    width: 11%;\n    padding: 5px; \n  }\n  \n  "]
                }] }
    ];
    /** @nocollapse */
    RsPaginationLibComponent.ctorParameters = function () { return [
        { type: ActivatedRoute },
        { type: Router }
    ]; };
    RsPaginationLibComponent.propDecorators = {
        page: [{ type: Input }],
        pagesNumber: [{ type: Input }],
        currentSize: [{ type: Input }]
    };
    return RsPaginationLibComponent;
}());
export { RsPaginationLibComponent };
if (false) {
    /** @type {?} */
    RsPaginationLibComponent.prototype.page;
    /** @type {?} */
    RsPaginationLibComponent.prototype.pagesNumber;
    /** @type {?} */
    RsPaginationLibComponent.prototype.currentSize;
    /** @type {?} */
    RsPaginationLibComponent.prototype.sizes;
    /** @type {?} */
    RsPaginationLibComponent.prototype.activatedRoute;
    /** @type {?} */
    RsPaginationLibComponent.prototype.router;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnMtcGFnaW5hdGlvbi1saWIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGNlbGw0cm9tL2Zyb250LWxpbmUvIiwic291cmNlcyI6WyJsaWIvcnMtcGFnaW5hdGlvbi1saWIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7Ozs7O0lBaUR2RCxrQ0FDVSxnQkFDQTtRQURBLG1CQUFjLEdBQWQsY0FBYztRQUNkLFdBQU0sR0FBTixNQUFNO3FCQUpELENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUM7S0FLckI7Ozs7SUFFTCwyQ0FBUTs7O0lBQVI7S0FDQzs7OztJQUdELDJDQUFROzs7SUFBUjtRQUNFLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFDckI7WUFDRSxVQUFVLEVBQUUsSUFBSSxDQUFDLGNBQWM7WUFDL0IsV0FBVyxFQUFFLEVBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUM7WUFDckMsbUJBQW1CLEVBQUUsT0FBTztTQUM3QixDQUFDLENBQUM7S0FDTjs7OztJQUVELDRDQUFTOzs7SUFBVDtRQUNFLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFDckI7WUFDRSxVQUFVLEVBQUUsSUFBSSxDQUFDLGNBQWM7WUFDL0IsV0FBVyxFQUFFLEVBQUMsSUFBSSxFQUFFLENBQUMsRUFBQztZQUN0QixtQkFBbUIsRUFBRSxPQUFPO1NBQzdCLENBQUMsQ0FBQztLQUNOOzs7O0lBRUQsK0NBQVk7OztJQUFaO1FBQ0UsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUNyQjtZQUNFLFVBQVUsRUFBRSxJQUFJLENBQUMsY0FBYztZQUMvQixXQUFXLEVBQUUsRUFBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFDO1lBQ2hDLG1CQUFtQixFQUFFLE9BQU87U0FDN0IsQ0FBQyxDQUFDO0tBQ047Ozs7SUFFRCwyQ0FBUTs7O0lBQVI7UUFDRSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQ3JCO1lBQ0UsVUFBVSxFQUFFLElBQUksQ0FBQyxjQUFjO1lBQy9CLFdBQVcsRUFBRSxFQUFDLElBQUksRUFBRSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUM7WUFDaEMsbUJBQW1CLEVBQUUsT0FBTztTQUM3QixDQUFDLENBQUM7S0FDTjs7OztJQUVBLDZDQUFVOzs7SUFBVjtRQUNDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFDckI7WUFDRSxVQUFVLEVBQUUsSUFBSSxDQUFDLGNBQWM7WUFDL0IsV0FBVyxFQUFFLEVBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUM7WUFDckMsbUJBQW1CLEVBQUUsT0FBTztTQUM3QixDQUFDLENBQUM7S0FDTjs7Z0JBOUZGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsbUJBQW1CO29CQUM3QixRQUFRLEVBQUUsNHNDQWlCVDs2QkFDUSwrS0FZUjtpQkFDRjs7OztnQkF4Q1EsY0FBYztnQkFBRSxNQUFNOzs7dUJBMkM1QixLQUFLOzhCQUNMLEtBQUs7OEJBQ0wsS0FBSzs7bUNBOUNSOztTQTBDYSx3QkFBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlLCBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuXG4vKipcbiAqICMjIyMgUGFnaW5hdGlvbiB3aXRoaW4gQVBJIFJTRVRcbiAqIFxuICogQXV0aG9yIDogcm9tZGhhbmlzYW1pcjk0QGdtYWlsLmNvbVxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdycy1wYWdpbmF0aW9uLWFwaScsXG4gIHRlbXBsYXRlOiBgXG4gIDxkaXYgKm5nSWY9XCJwYWdlc051bWJlciA+PSAxXCI+XG5cdDxkaXYgY2xhc3M9XCJyb3dcIj5cblx0XHRcdDxkaXYgY2xhc3M9XCJjb2wtbWQtMTJcIj5cblx0XHRcdFx0PGJ1dHRvbiBjbGFzcz0nYnRuIGJ0bi1pbmZvIGJ0bi1zbSBtLWwtMWVtJyAoY2xpY2spPVwiZmlyc3RQYWdlKClcIiBbZGlzYWJsZWRdPVwicGFnZSA9PT0gMVwiPjxpIGNsYXNzPVwiZmEgZmEtYW5nbGUtZG91YmxlLWxlZnRcIj48L2k+PC9idXR0b24+XG5cdFx0XHRcdDxidXR0b24gY2xhc3M9J2J0biBidG4taW5mbyBidG4tc20gbS1sLTFlbScgKGNsaWNrKT1cInByZXZpb3VzUGFnZSgpXCIgW2Rpc2FibGVkXT1cInBhZ2UgPT0gMVwiPjxpIGNsYXNzPVwiZmEgZmEtYW5nbGUtbGVmdFwiPjwvaT48L2J1dHRvbj5cblx0XHRcdFx0PHNwYW4gc3R5bGU9XCJtYXJnaW4tbGVmdDogMTBweDttYXJnaW4tcmlnaHQ6IDEwcHg7XCI+UGFnZSB7e3BhZ2V9fS97e3BhZ2VzTnVtYmVyfX08L3NwYW4+IFxuXHRcdFx0XHQ8c3Bhbj4gIDwvc3Bhbj5cbiAgICAgICAgPHNwYW4gc3R5bGU9XCJtYXJnaW4tbGVmdDogMTBweDttYXJnaW4tcmlnaHQ6IDEwcHg7XCI+U2l6ZTwvc3Bhbj5cblx0XHRcdFx0PHNlbGVjdCBjbGFzcz1cImZvcm0tY29udHJvbCBmb3JtLWNvbnRyb2wtc20gcGFnZVNpemVTZWxlY3RCb3hcIiBpZD1cImN1cnJlbnRTaXplXCIgbmFtZT1cImN1cnJlbnRTaXplXCIgWyhuZ01vZGVsKV09XCJjdXJyZW50U2l6ZVwiIChjaGFuZ2UpPVwiY2hhbmdlU2l6ZSgpXCI+XG5cdFx0XHRcdFx0PG9wdGlvbiAqbmdGb3I9XCJsZXQgc2l6ZSBvZiBzaXplc1wiIHZhbHVlPVwie3tzaXplfX1cIj57e3NpemV9fTwvb3B0aW9uPlxuICAgICAgICA8L3NlbGVjdD5cblx0XHRcdFx0PGJ1dHRvbiBjbGFzcz0nYnRuIGJ0bi1pbmZvIGJ0bi1zbSBtLWwtMWVtJyAoY2xpY2spPVwibmV4dFBhZ2UoKVwiIFtkaXNhYmxlZF09XCJwYWdlID09PSBwYWdlc051bWJlclwiPjxpIGNsYXNzPVwiZmEgZmEtYW5nbGUtcmlnaHRcIj48L2k+PC9idXR0b24+XG5cdFx0XHRcdDxidXR0b24gY2xhc3M9J2J0biBidG4taW5mbyBidG4tc20gbS1sLTFlbScgKGNsaWNrKT1cImxhc3RQYWdlKClcIiBbZGlzYWJsZWRdPVwicGFnZSA9PT0gcGFnZXNOdW1iZXJcIj48aSBjbGFzcz1cImZhIGZhLWFuZ2xlLWRvdWJsZS1yaWdodFwiPjwvaT48L2J1dHRvbj5cblx0XHRcdDwvZGl2PlxuXHQ8L2Rpdj5cbjwvZGl2PlxuICBgLFxuICBzdHlsZXM6IFtgXG4gIC5tLWwtMWVtIHsgXG4gICAgbWFyZ2luLWxlZnQ6MWVtOyBcbiAgICB3aWR0aDogMjVweDtcbiAgfVxuICBcbiAgLnBhZ2VTaXplU2VsZWN0Qm94IHtcbiAgICBkaXNwbGF5OiAtd2Via2l0LWlubGluZS1ib3g7XG4gICAgd2lkdGg6IDExJTtcbiAgICBwYWRkaW5nOiA1cHg7IFxuICB9XG4gIFxuICBgXVxufSlcbmV4cG9ydCBjbGFzcyBSc1BhZ2luYXRpb25MaWJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIEBJbnB1dCgpIHBhZ2U6IG51bWJlcjtcbiAgQElucHV0KCkgcGFnZXNOdW1iZXI6IG51bWJlcjtcbiAgQElucHV0KCkgY3VycmVudFNpemU6IG51bWJlcjtcblxuICBwdWJsaWMgc2l6ZXMgPSBbNSwgMTAsIDIwXVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgYWN0aXZhdGVkUm91dGU6IEFjdGl2YXRlZFJvdXRlLFxuICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXJcbiAgKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcbiAgfVxuXG4gIFxuICBsYXN0UGFnZSgpOiB2b2lkIHtcbiAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbXSwgXG4gICAgICB7XG4gICAgICAgIHJlbGF0aXZlVG86IHRoaXMuYWN0aXZhdGVkUm91dGUsXG4gICAgICAgIHF1ZXJ5UGFyYW1zOiB7cGFnZTogdGhpcy5wYWdlc051bWJlcn0sIFxuICAgICAgICBxdWVyeVBhcmFtc0hhbmRsaW5nOiBcIm1lcmdlXCJcbiAgICAgIH0pO1xuICB9XG5cbiAgZmlyc3RQYWdlKCk6IHZvaWQge1xuICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFtdLCBcbiAgICAgIHtcbiAgICAgICAgcmVsYXRpdmVUbzogdGhpcy5hY3RpdmF0ZWRSb3V0ZSxcbiAgICAgICAgcXVlcnlQYXJhbXM6IHtwYWdlOiAxfSwgXG4gICAgICAgIHF1ZXJ5UGFyYW1zSGFuZGxpbmc6IFwibWVyZ2VcIlxuICAgICAgfSk7XG4gIH1cblxuICBwcmV2aW91c1BhZ2UoKTogdm9pZCB7XG4gICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoW10sIFxuICAgICAge1xuICAgICAgICByZWxhdGl2ZVRvOiB0aGlzLmFjdGl2YXRlZFJvdXRlLFxuICAgICAgICBxdWVyeVBhcmFtczoge3BhZ2U6IC0tdGhpcy5wYWdlfSwgXG4gICAgICAgIHF1ZXJ5UGFyYW1zSGFuZGxpbmc6IFwibWVyZ2VcIlxuICAgICAgfSk7XG4gIH1cblxuICBuZXh0UGFnZSgpOiB2b2lkIHtcbiAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbXSwgXG4gICAgICB7XG4gICAgICAgIHJlbGF0aXZlVG86IHRoaXMuYWN0aXZhdGVkUm91dGUsXG4gICAgICAgIHF1ZXJ5UGFyYW1zOiB7cGFnZTogKyt0aGlzLnBhZ2V9LCBcbiAgICAgICAgcXVlcnlQYXJhbXNIYW5kbGluZzogXCJtZXJnZVwiXG4gICAgICB9KTtcbiAgfVxuXG4gICBjaGFuZ2VTaXplKCk6IHZvaWQge1xuICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFtdLCBcbiAgICAgIHtcbiAgICAgICAgcmVsYXRpdmVUbzogdGhpcy5hY3RpdmF0ZWRSb3V0ZSxcbiAgICAgICAgcXVlcnlQYXJhbXM6IHtzaXplOiB0aGlzLmN1cnJlbnRTaXplfSwgXG4gICAgICAgIHF1ZXJ5UGFyYW1zSGFuZGxpbmc6IFwibWVyZ2VcIlxuICAgICAgfSk7XG4gIH1cblxufVxuIl19