/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @param {?} totalItems
 * @param {?=} currentPage
 * @param {?=} pageSize
 * @param {?=} maxPages
 * @return {?}
 */
export function paginate(totalItems, currentPage, pageSize, maxPages) {
    if (currentPage === void 0) { currentPage = 1; }
    if (pageSize === void 0) { pageSize = 5; }
    if (maxPages === void 0) { maxPages = 10; }
    /** @type {?} */
    var totalPages = Math.ceil(totalItems / pageSize);
    // ensure current page isn't out of range
    if (currentPage < 1) {
        currentPage = 1;
    }
    else if (currentPage > totalPages) {
        currentPage = totalPages;
    }
    /** @type {?} */
    var startPage;
    /** @type {?} */
    var endPage;
    if (totalPages <= maxPages) {
        // total pages less than max so show all pages
        startPage = 1;
        endPage = totalPages;
    }
    else {
        /** @type {?} */
        var maxPagesBeforeCurrentPage = Math.floor(maxPages / 2);
        /** @type {?} */
        var maxPagesAfterCurrentPage = Math.ceil(maxPages / 2) - 1;
        if (currentPage <= maxPagesBeforeCurrentPage) {
            // current page near the start
            startPage = 1;
            endPage = maxPages;
        }
        else if (currentPage + maxPagesAfterCurrentPage >= totalPages) {
            // current page near the end
            startPage = totalPages - maxPages + 1;
            endPage = totalPages;
        }
        else {
            // current page somewhere in the middle
            startPage = currentPage - maxPagesBeforeCurrentPage;
            endPage = currentPage + maxPagesAfterCurrentPage;
        }
    }
    /** @type {?} */
    var startIndex = (currentPage - 1) * pageSize;
    /** @type {?} */
    var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);
    /** @type {?} */
    var pages = Array.from(Array((endPage + 1) - startPage).keys()).map(function (i) { return startPage + i; });
    // return object with all pager properties required by the view
    return {
        totalItems: totalItems,
        currentPage: currentPage,
        pageSize: pageSize,
        totalPages: totalPages,
        startPage: startPage,
        endPage: endPage,
        startIndex: startIndex,
        endIndex: endIndex,
        pages: pages
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnMtbW9kZWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2VsbDRyb20vZnJvbnQtbGluZS8iLCJzb3VyY2VzIjpbImxpYi92Mi9ycy1tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLE1BQU0sbUJBQ0YsVUFBa0IsRUFDbEIsV0FBdUIsRUFDdkIsUUFBb0IsRUFDcEIsUUFBcUI7SUFGckIsNEJBQUEsRUFBQSxlQUF1QjtJQUN2Qix5QkFBQSxFQUFBLFlBQW9CO0lBQ3BCLHlCQUFBLEVBQUEsYUFBcUI7O0lBR3JCLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQyxDQUFDOztJQUdsRCxFQUFFLENBQUMsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsQixXQUFXLEdBQUcsQ0FBQyxDQUFDO0tBQ25CO0lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLFdBQVcsR0FBRyxVQUFVLENBQUM7S0FDNUI7O0lBRUQsSUFBSSxTQUFTLENBQTBCOztJQUF2QyxJQUF1QixPQUFPLENBQVM7SUFDdkMsRUFBRSxDQUFDLENBQUMsVUFBVSxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUM7O1FBRTNCLFNBQVMsR0FBRyxDQUFDLENBQUM7UUFDZCxPQUFPLEdBQUcsVUFBVSxDQUFDO0tBQ3RCO0lBQUMsSUFBSSxDQUFDLENBQUM7O1FBRU4sSUFBSSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQzs7UUFDekQsSUFBSSx3QkFBd0IsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDM0QsRUFBRSxDQUFDLENBQUMsV0FBVyxJQUFJLHlCQUF5QixDQUFDLENBQUMsQ0FBQzs7WUFFN0MsU0FBUyxHQUFHLENBQUMsQ0FBQztZQUNkLE9BQU8sR0FBRyxRQUFRLENBQUM7U0FDcEI7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsV0FBVyxHQUFHLHdCQUF3QixJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUM7O1lBRWhFLFNBQVMsR0FBRyxVQUFVLEdBQUcsUUFBUSxHQUFHLENBQUMsQ0FBQztZQUN0QyxPQUFPLEdBQUcsVUFBVSxDQUFDO1NBQ3RCO1FBQUMsSUFBSSxDQUFDLENBQUM7O1lBRU4sU0FBUyxHQUFHLFdBQVcsR0FBRyx5QkFBeUIsQ0FBQztZQUNwRCxPQUFPLEdBQUcsV0FBVyxHQUFHLHdCQUF3QixDQUFDO1NBQ2xEO0tBQ0Y7O0lBR0QsSUFBSSxVQUFVLEdBQUcsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDOztJQUM5QyxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsR0FBRyxRQUFRLEdBQUcsQ0FBQyxFQUFFLFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQzs7SUFHbkUsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxTQUFTLEdBQUcsQ0FBQyxFQUFiLENBQWEsQ0FBQyxDQUFDOztJQUd4RixNQUFNLENBQUM7UUFDTCxVQUFVLEVBQUUsVUFBVTtRQUN0QixXQUFXLEVBQUUsV0FBVztRQUN4QixRQUFRLEVBQUUsUUFBUTtRQUNsQixVQUFVLEVBQUUsVUFBVTtRQUN0QixTQUFTLEVBQUUsU0FBUztRQUNwQixPQUFPLEVBQUUsT0FBTztRQUNoQixVQUFVLEVBQUUsVUFBVTtRQUN0QixRQUFRLEVBQUUsUUFBUTtRQUNsQixLQUFLLEVBQUUsS0FBSztLQUNiLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBwYWdpbmF0ZShcbiAgICB0b3RhbEl0ZW1zOiBudW1iZXIsXG4gICAgY3VycmVudFBhZ2U6IG51bWJlciA9IDEsXG4gICAgcGFnZVNpemU6IG51bWJlciA9IDUsXG4gICAgbWF4UGFnZXM6IG51bWJlciA9IDEwXG4gICkge1xuICAgIC8vIGNhbGN1bGF0ZSB0b3RhbCBwYWdlc1xuICAgIGxldCB0b3RhbFBhZ2VzID0gTWF0aC5jZWlsKHRvdGFsSXRlbXMgLyBwYWdlU2l6ZSk7XG4gIFxuICAgIC8vIGVuc3VyZSBjdXJyZW50IHBhZ2UgaXNuJ3Qgb3V0IG9mIHJhbmdlXG4gICAgaWYgKGN1cnJlbnRQYWdlIDwgMSkgeyBcbiAgICAgICAgY3VycmVudFBhZ2UgPSAxOyBcbiAgICB9IGVsc2UgaWYgKGN1cnJlbnRQYWdlID4gdG90YWxQYWdlcykgeyBcbiAgICAgICAgY3VycmVudFBhZ2UgPSB0b3RhbFBhZ2VzOyBcbiAgICB9XG4gIFxuICAgIGxldCBzdGFydFBhZ2U6IG51bWJlciwgZW5kUGFnZTogbnVtYmVyO1xuICAgIGlmICh0b3RhbFBhZ2VzIDw9IG1heFBhZ2VzKSB7XG4gICAgICAvLyB0b3RhbCBwYWdlcyBsZXNzIHRoYW4gbWF4IHNvIHNob3cgYWxsIHBhZ2VzXG4gICAgICBzdGFydFBhZ2UgPSAxO1xuICAgICAgZW5kUGFnZSA9IHRvdGFsUGFnZXM7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHRvdGFsIHBhZ2VzIG1vcmUgdGhhbiBtYXggc28gY2FsY3VsYXRlIHN0YXJ0IGFuZCBlbmQgcGFnZXNcbiAgICAgIGxldCBtYXhQYWdlc0JlZm9yZUN1cnJlbnRQYWdlID0gTWF0aC5mbG9vcihtYXhQYWdlcyAvIDIpO1xuICAgICAgbGV0IG1heFBhZ2VzQWZ0ZXJDdXJyZW50UGFnZSA9IE1hdGguY2VpbChtYXhQYWdlcyAvIDIpIC0gMTtcbiAgICAgIGlmIChjdXJyZW50UGFnZSA8PSBtYXhQYWdlc0JlZm9yZUN1cnJlbnRQYWdlKSB7XG4gICAgICAgIC8vIGN1cnJlbnQgcGFnZSBuZWFyIHRoZSBzdGFydFxuICAgICAgICBzdGFydFBhZ2UgPSAxO1xuICAgICAgICBlbmRQYWdlID0gbWF4UGFnZXM7XG4gICAgICB9IGVsc2UgaWYgKGN1cnJlbnRQYWdlICsgbWF4UGFnZXNBZnRlckN1cnJlbnRQYWdlID49IHRvdGFsUGFnZXMpIHtcbiAgICAgICAgLy8gY3VycmVudCBwYWdlIG5lYXIgdGhlIGVuZFxuICAgICAgICBzdGFydFBhZ2UgPSB0b3RhbFBhZ2VzIC0gbWF4UGFnZXMgKyAxO1xuICAgICAgICBlbmRQYWdlID0gdG90YWxQYWdlcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGN1cnJlbnQgcGFnZSBzb21ld2hlcmUgaW4gdGhlIG1pZGRsZVxuICAgICAgICBzdGFydFBhZ2UgPSBjdXJyZW50UGFnZSAtIG1heFBhZ2VzQmVmb3JlQ3VycmVudFBhZ2U7XG4gICAgICAgIGVuZFBhZ2UgPSBjdXJyZW50UGFnZSArIG1heFBhZ2VzQWZ0ZXJDdXJyZW50UGFnZTtcbiAgICAgIH1cbiAgICB9XG4gIFxuICAgIC8vIGNhbGN1bGF0ZSBzdGFydCBhbmQgZW5kIGl0ZW0gaW5kZXhlc1xuICAgIGxldCBzdGFydEluZGV4ID0gKGN1cnJlbnRQYWdlIC0gMSkgKiBwYWdlU2l6ZTtcbiAgICBsZXQgZW5kSW5kZXggPSBNYXRoLm1pbihzdGFydEluZGV4ICsgcGFnZVNpemUgLSAxLCB0b3RhbEl0ZW1zIC0gMSk7XG4gIFxuICAgIC8vIGNyZWF0ZSBhbiBhcnJheSBvZiBwYWdlcyB0byBuZy1yZXBlYXQgaW4gdGhlIHBhZ2VyIGNvbnRyb2xcbiAgICBsZXQgcGFnZXMgPSBBcnJheS5mcm9tKEFycmF5KChlbmRQYWdlICsgMSkgLSBzdGFydFBhZ2UpLmtleXMoKSkubWFwKGkgPT4gc3RhcnRQYWdlICsgaSk7XG4gIFxuICAgIC8vIHJldHVybiBvYmplY3Qgd2l0aCBhbGwgcGFnZXIgcHJvcGVydGllcyByZXF1aXJlZCBieSB0aGUgdmlld1xuICAgIHJldHVybiB7XG4gICAgICB0b3RhbEl0ZW1zOiB0b3RhbEl0ZW1zLFxuICAgICAgY3VycmVudFBhZ2U6IGN1cnJlbnRQYWdlLFxuICAgICAgcGFnZVNpemU6IHBhZ2VTaXplLFxuICAgICAgdG90YWxQYWdlczogdG90YWxQYWdlcyxcbiAgICAgIHN0YXJ0UGFnZTogc3RhcnRQYWdlLFxuICAgICAgZW5kUGFnZTogZW5kUGFnZSxcbiAgICAgIHN0YXJ0SW5kZXg6IHN0YXJ0SW5kZXgsXG4gICAgICBlbmRJbmRleDogZW5kSW5kZXgsXG4gICAgICBwYWdlczogcGFnZXNcbiAgICB9O1xuICB9Il19