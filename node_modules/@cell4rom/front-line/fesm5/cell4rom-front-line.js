import { Injectable, Component, EventEmitter, Input, Output, NgModule, defineInjectable } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var RsPaginationLibService = /** @class */ (function () {
    function RsPaginationLibService() {
    }
    RsPaginationLibService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    RsPaginationLibService.ctorParameters = function () { return []; };
    /** @nocollapse */ RsPaginationLibService.ngInjectableDef = defineInjectable({ factory: function RsPaginationLibService_Factory() { return new RsPaginationLibService(); }, token: RsPaginationLibService, providedIn: "root" });
    return RsPaginationLibService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * #### Pagination within API RSET
 *
 * Author : romdhanisamir94\@gmail.com
 */
var RsPaginationLibComponent = /** @class */ (function () {
    function RsPaginationLibComponent(activatedRoute, router) {
        this.activatedRoute = activatedRoute;
        this.router = router;
        this.sizes = [5, 10, 20];
    }
    /**
     * @return {?}
     */
    RsPaginationLibComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    RsPaginationLibComponent.prototype.lastPage = /**
     * @return {?}
     */
    function () {
        this.router.navigate([], {
            relativeTo: this.activatedRoute,
            queryParams: { page: this.pagesNumber },
            queryParamsHandling: "merge"
        });
    };
    /**
     * @return {?}
     */
    RsPaginationLibComponent.prototype.firstPage = /**
     * @return {?}
     */
    function () {
        this.router.navigate([], {
            relativeTo: this.activatedRoute,
            queryParams: { page: 1 },
            queryParamsHandling: "merge"
        });
    };
    /**
     * @return {?}
     */
    RsPaginationLibComponent.prototype.previousPage = /**
     * @return {?}
     */
    function () {
        this.router.navigate([], {
            relativeTo: this.activatedRoute,
            queryParams: { page: --this.page },
            queryParamsHandling: "merge"
        });
    };
    /**
     * @return {?}
     */
    RsPaginationLibComponent.prototype.nextPage = /**
     * @return {?}
     */
    function () {
        this.router.navigate([], {
            relativeTo: this.activatedRoute,
            queryParams: { page: ++this.page },
            queryParamsHandling: "merge"
        });
    };
    /**
     * @return {?}
     */
    RsPaginationLibComponent.prototype.changeSize = /**
     * @return {?}
     */
    function () {
        this.router.navigate([], {
            relativeTo: this.activatedRoute,
            queryParams: { size: this.currentSize },
            queryParamsHandling: "merge"
        });
    };
    RsPaginationLibComponent.decorators = [
        { type: Component, args: [{
                    selector: 'rs-pagination-api',
                    template: "\n  <div *ngIf=\"pagesNumber >= 1\">\n\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<button class='btn btn-info btn-sm m-l-1em' (click)=\"firstPage()\" [disabled]=\"page === 1\"><i class=\"fa fa-angle-double-left\"></i></button>\n\t\t\t\t<button class='btn btn-info btn-sm m-l-1em' (click)=\"previousPage()\" [disabled]=\"page == 1\"><i class=\"fa fa-angle-left\"></i></button>\n\t\t\t\t<span style=\"margin-left: 10px;margin-right: 10px;\">Page {{page}}/{{pagesNumber}}</span> \n\t\t\t\t<span>  </span>\n        <span style=\"margin-left: 10px;margin-right: 10px;\">Size</span>\n\t\t\t\t<select class=\"form-control form-control-sm pageSizeSelectBox\" id=\"currentSize\" name=\"currentSize\" [(ngModel)]=\"currentSize\" (change)=\"changeSize()\">\n\t\t\t\t\t<option *ngFor=\"let size of sizes\" value=\"{{size}}\">{{size}}</option>\n        </select>\n\t\t\t\t<button class='btn btn-info btn-sm m-l-1em' (click)=\"nextPage()\" [disabled]=\"page === pagesNumber\"><i class=\"fa fa-angle-right\"></i></button>\n\t\t\t\t<button class='btn btn-info btn-sm m-l-1em' (click)=\"lastPage()\" [disabled]=\"page === pagesNumber\"><i class=\"fa fa-angle-double-right\"></i></button>\n\t\t\t</div>\n\t</div>\n</div>\n  ",
                    styles: ["\n  .m-l-1em { \n    margin-left:1em; \n    width: 25px;\n  }\n  \n  .pageSizeSelectBox {\n    display: -webkit-inline-box;\n    width: 11%;\n    padding: 5px; \n  }\n  \n  "]
                }] }
    ];
    /** @nocollapse */
    RsPaginationLibComponent.ctorParameters = function () { return [
        { type: ActivatedRoute },
        { type: Router }
    ]; };
    RsPaginationLibComponent.propDecorators = {
        page: [{ type: Input }],
        pagesNumber: [{ type: Input }],
        currentSize: [{ type: Input }]
    };
    return RsPaginationLibComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @param {?} totalItems
 * @param {?=} currentPage
 * @param {?=} pageSize
 * @param {?=} maxPages
 * @return {?}
 */
function paginate(totalItems, currentPage, pageSize, maxPages) {
    if (currentPage === void 0) { currentPage = 1; }
    if (pageSize === void 0) { pageSize = 5; }
    if (maxPages === void 0) { maxPages = 10; }
    /** @type {?} */
    var totalPages = Math.ceil(totalItems / pageSize);
    // ensure current page isn't out of range
    if (currentPage < 1) {
        currentPage = 1;
    }
    else if (currentPage > totalPages) {
        currentPage = totalPages;
    }
    /** @type {?} */
    var startPage;
    /** @type {?} */
    var endPage;
    if (totalPages <= maxPages) {
        // total pages less than max so show all pages
        startPage = 1;
        endPage = totalPages;
    }
    else {
        /** @type {?} */
        var maxPagesBeforeCurrentPage = Math.floor(maxPages / 2);
        /** @type {?} */
        var maxPagesAfterCurrentPage = Math.ceil(maxPages / 2) - 1;
        if (currentPage <= maxPagesBeforeCurrentPage) {
            // current page near the start
            startPage = 1;
            endPage = maxPages;
        }
        else if (currentPage + maxPagesAfterCurrentPage >= totalPages) {
            // current page near the end
            startPage = totalPages - maxPages + 1;
            endPage = totalPages;
        }
        else {
            // current page somewhere in the middle
            startPage = currentPage - maxPagesBeforeCurrentPage;
            endPage = currentPage + maxPagesAfterCurrentPage;
        }
    }
    /** @type {?} */
    var startIndex = (currentPage - 1) * pageSize;
    /** @type {?} */
    var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);
    /** @type {?} */
    var pages = Array.from(Array((endPage + 1) - startPage).keys()).map(function (i) { return startPage + i; });
    // return object with all pager properties required by the view
    return {
        totalItems: totalItems,
        currentPage: currentPage,
        pageSize: pageSize,
        totalPages: totalPages,
        startPage: startPage,
        endPage: endPage,
        startIndex: startIndex,
        endIndex: endIndex,
        pages: pages
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * #### Pagination without API RSET
 *
 * Author : romdhanisamir94\@gmail.com
 */
var RsPaginationComponent = /** @class */ (function () {
    function RsPaginationComponent() {
        this.currentPage = 1;
        this.sizes = [5, 10, 20];
        this.changePage = new EventEmitter(true);
    }
    /**
     * @return {?}
     */
    RsPaginationComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    RsPaginationComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.items && this.items.length) {
            this.pagesNumber = Math.ceil(this.items.length / this.currentSize);
            this.setPage(this.currentPage);
        }
    };
    /**
     * @return {?}
     */
    RsPaginationComponent.prototype.lastPage = /**
     * @return {?}
     */
    function () {
        this.currentPage = this.pagesNumber;
        this.setPage(this.currentPage);
    };
    /**
     * @return {?}
     */
    RsPaginationComponent.prototype.firstPage = /**
     * @return {?}
     */
    function () {
        this.currentPage = 1;
        this.setPage(this.currentPage);
    };
    /**
     * @return {?}
     */
    RsPaginationComponent.prototype.previousPage = /**
     * @return {?}
     */
    function () {
        this.currentPage = this.currentPage - 1;
        this.setPage(this.currentPage);
    };
    /**
     * @return {?}
     */
    RsPaginationComponent.prototype.nextPage = /**
     * @return {?}
     */
    function () {
        this.currentPage = this.currentPage + 1;
        this.setPage(this.currentPage);
    };
    /**
     * @param {?} size
     * @return {?}
     */
    RsPaginationComponent.prototype.changeSize = /**
     * @param {?} size
     * @return {?}
     */
    function (size) {
        this.setSize(size);
    };
    /**
     * @param {?} page
     * @return {?}
     */
    RsPaginationComponent.prototype.setPage = /**
     * @param {?} page
     * @return {?}
     */
    function (page) {
        /** @type {?} */
        var pager = paginate(this.items.length, page, this.currentSize);
        this.currentPage = pager.currentPage;
        this.pagesNumber = pager.totalPages;
        /** @type {?} */
        var pageOfItems = this.items.slice(pager.startIndex, pager.endIndex + 1);
        this.changePage.emit(pageOfItems);
    };
    /**
     * @param {?} size
     * @return {?}
     */
    RsPaginationComponent.prototype.setSize = /**
     * @param {?} size
     * @return {?}
     */
    function (size) {
        /** @type {?} */
        var pager = paginate(this.items.length, this.currentPage, size);
        this.currentPage = pager.currentPage;
        this.pagesNumber = pager.totalPages;
        /** @type {?} */
        var pageOfItems = this.items.slice(pager.startIndex, pager.endIndex + 1);
        this.changePage.emit(pageOfItems);
    };
    RsPaginationComponent.decorators = [
        { type: Component, args: [{
                    selector: 'rs-pagination',
                    template: "\n  <div>\n\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<button class='btn btn-info btn-sm m-l-1em' (click)=\"firstPage()\" [disabled]=\"currentPage === 1\"><i class=\"fa fa-angle-double-left\"></i></button>\n\t\t\t\t<button class='btn btn-info btn-sm m-l-1em' (click)=\"previousPage()\" [disabled]=\"currentPage == 1\"><i class=\"fa fa-angle-left\"></i></button>\n\t\t\t\t<span style=\"margin-left: 10px;margin-right: 10px;\">Page {{currentPage}}/{{pagesNumber}}</span> \n\t\t\t\t<span>  </span>\n        <span style=\"margin-left: 10px;margin-right: 10px;\">Size</span>\n        <select class=\"form-control form-control-sm pageSizeSelectBox\" id=\"currentSize\" \n                name=\"currentSize\" [(ngModel)]=\"currentSize\" (change)=\"changeSize(currentSize)\">\n\t\t\t\t\t<option *ngFor=\"let size of sizes\" value=\"{{size}}\">{{size}}</option>\n        </select>\n\t\t\t\t<button class='btn btn-info btn-sm m-l-1em' (click)=\"nextPage()\" [disabled]=\"currentPage === pagesNumber\"><i class=\"fa fa-angle-right\"></i></button>\n\t\t\t\t<button class='btn btn-info btn-sm m-l-1em' (click)=\"lastPage()\" [disabled]=\"currentPage === pagesNumber\"><i class=\"fa fa-angle-double-right\"></i></button>\n\t\t\t</div>\n\t</div>\n</div>\n  ",
                    styles: ["\n  .m-l-1em { \n    margin-left:1em; \n    width: 25px;\n  }\n  \n  .pageSizeSelectBox {\n    display: -webkit-inline-box;\n    width: 11%;\n    padding: 5px; \n  }\n  \n  "]
                }] }
    ];
    /** @nocollapse */
    RsPaginationComponent.ctorParameters = function () { return []; };
    RsPaginationComponent.propDecorators = {
        items: [{ type: Input }],
        currentSize: [{ type: Input }],
        changePage: [{ type: Output }]
    };
    return RsPaginationComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Author : romdhanisamir94\@gmail.com
 */
var RsPaginationModule = /** @class */ (function () {
    function RsPaginationModule() {
    }
    RsPaginationModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        RsPaginationLibComponent,
                        RsPaginationComponent
                    ],
                    imports: [
                        CommonModule,
                        FormsModule
                    ],
                    exports: [
                        RsPaginationLibComponent,
                        RsPaginationComponent
                    ]
                },] }
    ];
    return RsPaginationModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { RsPaginationLibService, RsPaginationLibComponent, RsPaginationModule, RsPaginationComponent as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2VsbDRyb20tZnJvbnQtbGluZS5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vQGNlbGw0cm9tL2Zyb250LWxpbmUvbGliL3JzLXBhZ2luYXRpb24tbGliLnNlcnZpY2UudHMiLCJuZzovL0BjZWxsNHJvbS9mcm9udC1saW5lL2xpYi9ycy1wYWdpbmF0aW9uLWxpYi5jb21wb25lbnQudHMiLCJuZzovL0BjZWxsNHJvbS9mcm9udC1saW5lL2xpYi92Mi9ycy1tb2RlbC50cyIsIm5nOi8vQGNlbGw0cm9tL2Zyb250LWxpbmUvbGliL3YyL3JzLXBhZ2luYXRpb24uY29tcG9uZW50LnRzIiwibmc6Ly9AY2VsbDRyb20vZnJvbnQtbGluZS9saWIvcnMtcGFnaW5hdGlvbi1saWIubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFJzUGFnaW5hdGlvbkxpYlNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUsIFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5cbi8qKlxuICogIyMjIyBQYWdpbmF0aW9uIHdpdGhpbiBBUEkgUlNFVFxuICogXG4gKiBBdXRob3IgOiByb21kaGFuaXNhbWlyOTRAZ21haWwuY29tXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3JzLXBhZ2luYXRpb24tYXBpJyxcbiAgdGVtcGxhdGU6IGBcbiAgPGRpdiAqbmdJZj1cInBhZ2VzTnVtYmVyID49IDFcIj5cblx0PGRpdiBjbGFzcz1cInJvd1wiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC1tZC0xMlwiPlxuXHRcdFx0XHQ8YnV0dG9uIGNsYXNzPSdidG4gYnRuLWluZm8gYnRuLXNtIG0tbC0xZW0nIChjbGljayk9XCJmaXJzdFBhZ2UoKVwiIFtkaXNhYmxlZF09XCJwYWdlID09PSAxXCI+PGkgY2xhc3M9XCJmYSBmYS1hbmdsZS1kb3VibGUtbGVmdFwiPjwvaT48L2J1dHRvbj5cblx0XHRcdFx0PGJ1dHRvbiBjbGFzcz0nYnRuIGJ0bi1pbmZvIGJ0bi1zbSBtLWwtMWVtJyAoY2xpY2spPVwicHJldmlvdXNQYWdlKClcIiBbZGlzYWJsZWRdPVwicGFnZSA9PSAxXCI+PGkgY2xhc3M9XCJmYSBmYS1hbmdsZS1sZWZ0XCI+PC9pPjwvYnV0dG9uPlxuXHRcdFx0XHQ8c3BhbiBzdHlsZT1cIm1hcmdpbi1sZWZ0OiAxMHB4O21hcmdpbi1yaWdodDogMTBweDtcIj5QYWdlIHt7cGFnZX19L3t7cGFnZXNOdW1iZXJ9fTwvc3Bhbj4gXG5cdFx0XHRcdDxzcGFuPiAgPC9zcGFuPlxuICAgICAgICA8c3BhbiBzdHlsZT1cIm1hcmdpbi1sZWZ0OiAxMHB4O21hcmdpbi1yaWdodDogMTBweDtcIj5TaXplPC9zcGFuPlxuXHRcdFx0XHQ8c2VsZWN0IGNsYXNzPVwiZm9ybS1jb250cm9sIGZvcm0tY29udHJvbC1zbSBwYWdlU2l6ZVNlbGVjdEJveFwiIGlkPVwiY3VycmVudFNpemVcIiBuYW1lPVwiY3VycmVudFNpemVcIiBbKG5nTW9kZWwpXT1cImN1cnJlbnRTaXplXCIgKGNoYW5nZSk9XCJjaGFuZ2VTaXplKClcIj5cblx0XHRcdFx0XHQ8b3B0aW9uICpuZ0Zvcj1cImxldCBzaXplIG9mIHNpemVzXCIgdmFsdWU9XCJ7e3NpemV9fVwiPnt7c2l6ZX19PC9vcHRpb24+XG4gICAgICAgIDwvc2VsZWN0PlxuXHRcdFx0XHQ8YnV0dG9uIGNsYXNzPSdidG4gYnRuLWluZm8gYnRuLXNtIG0tbC0xZW0nIChjbGljayk9XCJuZXh0UGFnZSgpXCIgW2Rpc2FibGVkXT1cInBhZ2UgPT09IHBhZ2VzTnVtYmVyXCI+PGkgY2xhc3M9XCJmYSBmYS1hbmdsZS1yaWdodFwiPjwvaT48L2J1dHRvbj5cblx0XHRcdFx0PGJ1dHRvbiBjbGFzcz0nYnRuIGJ0bi1pbmZvIGJ0bi1zbSBtLWwtMWVtJyAoY2xpY2spPVwibGFzdFBhZ2UoKVwiIFtkaXNhYmxlZF09XCJwYWdlID09PSBwYWdlc051bWJlclwiPjxpIGNsYXNzPVwiZmEgZmEtYW5nbGUtZG91YmxlLXJpZ2h0XCI+PC9pPjwvYnV0dG9uPlxuXHRcdFx0PC9kaXY+XG5cdDwvZGl2PlxuPC9kaXY+XG4gIGAsXG4gIHN0eWxlczogW2BcbiAgLm0tbC0xZW0geyBcbiAgICBtYXJnaW4tbGVmdDoxZW07IFxuICAgIHdpZHRoOiAyNXB4O1xuICB9XG4gIFxuICAucGFnZVNpemVTZWxlY3RCb3gge1xuICAgIGRpc3BsYXk6IC13ZWJraXQtaW5saW5lLWJveDtcbiAgICB3aWR0aDogMTElO1xuICAgIHBhZGRpbmc6IDVweDsgXG4gIH1cbiAgXG4gIGBdXG59KVxuZXhwb3J0IGNsYXNzIFJzUGFnaW5hdGlvbkxpYkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgQElucHV0KCkgcGFnZTogbnVtYmVyO1xuICBASW5wdXQoKSBwYWdlc051bWJlcjogbnVtYmVyO1xuICBASW5wdXQoKSBjdXJyZW50U2l6ZTogbnVtYmVyO1xuXG4gIHB1YmxpYyBzaXplcyA9IFs1LCAxMCwgMjBdXG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBhY3RpdmF0ZWRSb3V0ZTogQWN0aXZhdGVkUm91dGUsXG4gICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlclxuICApIHsgfVxuXG4gIG5nT25Jbml0KCkge1xuICB9XG5cbiAgXG4gIGxhc3RQYWdlKCk6IHZvaWQge1xuICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFtdLCBcbiAgICAgIHtcbiAgICAgICAgcmVsYXRpdmVUbzogdGhpcy5hY3RpdmF0ZWRSb3V0ZSxcbiAgICAgICAgcXVlcnlQYXJhbXM6IHtwYWdlOiB0aGlzLnBhZ2VzTnVtYmVyfSwgXG4gICAgICAgIHF1ZXJ5UGFyYW1zSGFuZGxpbmc6IFwibWVyZ2VcIlxuICAgICAgfSk7XG4gIH1cblxuICBmaXJzdFBhZ2UoKTogdm9pZCB7XG4gICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoW10sIFxuICAgICAge1xuICAgICAgICByZWxhdGl2ZVRvOiB0aGlzLmFjdGl2YXRlZFJvdXRlLFxuICAgICAgICBxdWVyeVBhcmFtczoge3BhZ2U6IDF9LCBcbiAgICAgICAgcXVlcnlQYXJhbXNIYW5kbGluZzogXCJtZXJnZVwiXG4gICAgICB9KTtcbiAgfVxuXG4gIHByZXZpb3VzUGFnZSgpOiB2b2lkIHtcbiAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbXSwgXG4gICAgICB7XG4gICAgICAgIHJlbGF0aXZlVG86IHRoaXMuYWN0aXZhdGVkUm91dGUsXG4gICAgICAgIHF1ZXJ5UGFyYW1zOiB7cGFnZTogLS10aGlzLnBhZ2V9LCBcbiAgICAgICAgcXVlcnlQYXJhbXNIYW5kbGluZzogXCJtZXJnZVwiXG4gICAgICB9KTtcbiAgfVxuXG4gIG5leHRQYWdlKCk6IHZvaWQge1xuICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFtdLCBcbiAgICAgIHtcbiAgICAgICAgcmVsYXRpdmVUbzogdGhpcy5hY3RpdmF0ZWRSb3V0ZSxcbiAgICAgICAgcXVlcnlQYXJhbXM6IHtwYWdlOiArK3RoaXMucGFnZX0sIFxuICAgICAgICBxdWVyeVBhcmFtc0hhbmRsaW5nOiBcIm1lcmdlXCJcbiAgICAgIH0pO1xuICB9XG5cbiAgIGNoYW5nZVNpemUoKTogdm9pZCB7XG4gICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoW10sIFxuICAgICAge1xuICAgICAgICByZWxhdGl2ZVRvOiB0aGlzLmFjdGl2YXRlZFJvdXRlLFxuICAgICAgICBxdWVyeVBhcmFtczoge3NpemU6IHRoaXMuY3VycmVudFNpemV9LCBcbiAgICAgICAgcXVlcnlQYXJhbXNIYW5kbGluZzogXCJtZXJnZVwiXG4gICAgICB9KTtcbiAgfVxuXG59XG4iLCJleHBvcnQgZnVuY3Rpb24gcGFnaW5hdGUoXG4gICAgdG90YWxJdGVtczogbnVtYmVyLFxuICAgIGN1cnJlbnRQYWdlOiBudW1iZXIgPSAxLFxuICAgIHBhZ2VTaXplOiBudW1iZXIgPSA1LFxuICAgIG1heFBhZ2VzOiBudW1iZXIgPSAxMFxuICApIHtcbiAgICAvLyBjYWxjdWxhdGUgdG90YWwgcGFnZXNcbiAgICBsZXQgdG90YWxQYWdlcyA9IE1hdGguY2VpbCh0b3RhbEl0ZW1zIC8gcGFnZVNpemUpO1xuICBcbiAgICAvLyBlbnN1cmUgY3VycmVudCBwYWdlIGlzbid0IG91dCBvZiByYW5nZVxuICAgIGlmIChjdXJyZW50UGFnZSA8IDEpIHsgXG4gICAgICAgIGN1cnJlbnRQYWdlID0gMTsgXG4gICAgfSBlbHNlIGlmIChjdXJyZW50UGFnZSA+IHRvdGFsUGFnZXMpIHsgXG4gICAgICAgIGN1cnJlbnRQYWdlID0gdG90YWxQYWdlczsgXG4gICAgfVxuICBcbiAgICBsZXQgc3RhcnRQYWdlOiBudW1iZXIsIGVuZFBhZ2U6IG51bWJlcjtcbiAgICBpZiAodG90YWxQYWdlcyA8PSBtYXhQYWdlcykge1xuICAgICAgLy8gdG90YWwgcGFnZXMgbGVzcyB0aGFuIG1heCBzbyBzaG93IGFsbCBwYWdlc1xuICAgICAgc3RhcnRQYWdlID0gMTtcbiAgICAgIGVuZFBhZ2UgPSB0b3RhbFBhZ2VzO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB0b3RhbCBwYWdlcyBtb3JlIHRoYW4gbWF4IHNvIGNhbGN1bGF0ZSBzdGFydCBhbmQgZW5kIHBhZ2VzXG4gICAgICBsZXQgbWF4UGFnZXNCZWZvcmVDdXJyZW50UGFnZSA9IE1hdGguZmxvb3IobWF4UGFnZXMgLyAyKTtcbiAgICAgIGxldCBtYXhQYWdlc0FmdGVyQ3VycmVudFBhZ2UgPSBNYXRoLmNlaWwobWF4UGFnZXMgLyAyKSAtIDE7XG4gICAgICBpZiAoY3VycmVudFBhZ2UgPD0gbWF4UGFnZXNCZWZvcmVDdXJyZW50UGFnZSkge1xuICAgICAgICAvLyBjdXJyZW50IHBhZ2UgbmVhciB0aGUgc3RhcnRcbiAgICAgICAgc3RhcnRQYWdlID0gMTtcbiAgICAgICAgZW5kUGFnZSA9IG1heFBhZ2VzO1xuICAgICAgfSBlbHNlIGlmIChjdXJyZW50UGFnZSArIG1heFBhZ2VzQWZ0ZXJDdXJyZW50UGFnZSA+PSB0b3RhbFBhZ2VzKSB7XG4gICAgICAgIC8vIGN1cnJlbnQgcGFnZSBuZWFyIHRoZSBlbmRcbiAgICAgICAgc3RhcnRQYWdlID0gdG90YWxQYWdlcyAtIG1heFBhZ2VzICsgMTtcbiAgICAgICAgZW5kUGFnZSA9IHRvdGFsUGFnZXM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBjdXJyZW50IHBhZ2Ugc29tZXdoZXJlIGluIHRoZSBtaWRkbGVcbiAgICAgICAgc3RhcnRQYWdlID0gY3VycmVudFBhZ2UgLSBtYXhQYWdlc0JlZm9yZUN1cnJlbnRQYWdlO1xuICAgICAgICBlbmRQYWdlID0gY3VycmVudFBhZ2UgKyBtYXhQYWdlc0FmdGVyQ3VycmVudFBhZ2U7XG4gICAgICB9XG4gICAgfVxuICBcbiAgICAvLyBjYWxjdWxhdGUgc3RhcnQgYW5kIGVuZCBpdGVtIGluZGV4ZXNcbiAgICBsZXQgc3RhcnRJbmRleCA9IChjdXJyZW50UGFnZSAtIDEpICogcGFnZVNpemU7XG4gICAgbGV0IGVuZEluZGV4ID0gTWF0aC5taW4oc3RhcnRJbmRleCArIHBhZ2VTaXplIC0gMSwgdG90YWxJdGVtcyAtIDEpO1xuICBcbiAgICAvLyBjcmVhdGUgYW4gYXJyYXkgb2YgcGFnZXMgdG8gbmctcmVwZWF0IGluIHRoZSBwYWdlciBjb250cm9sXG4gICAgbGV0IHBhZ2VzID0gQXJyYXkuZnJvbShBcnJheSgoZW5kUGFnZSArIDEpIC0gc3RhcnRQYWdlKS5rZXlzKCkpLm1hcChpID0+IHN0YXJ0UGFnZSArIGkpO1xuICBcbiAgICAvLyByZXR1cm4gb2JqZWN0IHdpdGggYWxsIHBhZ2VyIHByb3BlcnRpZXMgcmVxdWlyZWQgYnkgdGhlIHZpZXdcbiAgICByZXR1cm4ge1xuICAgICAgdG90YWxJdGVtczogdG90YWxJdGVtcyxcbiAgICAgIGN1cnJlbnRQYWdlOiBjdXJyZW50UGFnZSxcbiAgICAgIHBhZ2VTaXplOiBwYWdlU2l6ZSxcbiAgICAgIHRvdGFsUGFnZXM6IHRvdGFsUGFnZXMsXG4gICAgICBzdGFydFBhZ2U6IHN0YXJ0UGFnZSxcbiAgICAgIGVuZFBhZ2U6IGVuZFBhZ2UsXG4gICAgICBzdGFydEluZGV4OiBzdGFydEluZGV4LFxuICAgICAgZW5kSW5kZXg6IGVuZEluZGV4LFxuICAgICAgcGFnZXM6IHBhZ2VzXG4gICAgfTtcbiAgfSIsImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBFdmVudEVtaXR0ZXIsIElucHV0LCBTaW1wbGVDaGFuZ2VzLCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHBhZ2luYXRlIH0gZnJvbSAnLi9ycy1tb2RlbCc7XG5cbi8qKlxuICogIyMjIyBQYWdpbmF0aW9uIHdpdGhvdXQgQVBJIFJTRVRcbiAqIFxuICogQXV0aG9yIDogcm9tZGhhbmlzYW1pcjk0QGdtYWlsLmNvbVxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdycy1wYWdpbmF0aW9uJyxcbiAgdGVtcGxhdGU6IGBcbiAgPGRpdj5cblx0PGRpdiBjbGFzcz1cInJvd1wiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC1tZC0xMlwiPlxuXHRcdFx0XHQ8YnV0dG9uIGNsYXNzPSdidG4gYnRuLWluZm8gYnRuLXNtIG0tbC0xZW0nIChjbGljayk9XCJmaXJzdFBhZ2UoKVwiIFtkaXNhYmxlZF09XCJjdXJyZW50UGFnZSA9PT0gMVwiPjxpIGNsYXNzPVwiZmEgZmEtYW5nbGUtZG91YmxlLWxlZnRcIj48L2k+PC9idXR0b24+XG5cdFx0XHRcdDxidXR0b24gY2xhc3M9J2J0biBidG4taW5mbyBidG4tc20gbS1sLTFlbScgKGNsaWNrKT1cInByZXZpb3VzUGFnZSgpXCIgW2Rpc2FibGVkXT1cImN1cnJlbnRQYWdlID09IDFcIj48aSBjbGFzcz1cImZhIGZhLWFuZ2xlLWxlZnRcIj48L2k+PC9idXR0b24+XG5cdFx0XHRcdDxzcGFuIHN0eWxlPVwibWFyZ2luLWxlZnQ6IDEwcHg7bWFyZ2luLXJpZ2h0OiAxMHB4O1wiPlBhZ2Uge3tjdXJyZW50UGFnZX19L3t7cGFnZXNOdW1iZXJ9fTwvc3Bhbj4gXG5cdFx0XHRcdDxzcGFuPiAgPC9zcGFuPlxuICAgICAgICA8c3BhbiBzdHlsZT1cIm1hcmdpbi1sZWZ0OiAxMHB4O21hcmdpbi1yaWdodDogMTBweDtcIj5TaXplPC9zcGFuPlxuICAgICAgICA8c2VsZWN0IGNsYXNzPVwiZm9ybS1jb250cm9sIGZvcm0tY29udHJvbC1zbSBwYWdlU2l6ZVNlbGVjdEJveFwiIGlkPVwiY3VycmVudFNpemVcIiBcbiAgICAgICAgICAgICAgICBuYW1lPVwiY3VycmVudFNpemVcIiBbKG5nTW9kZWwpXT1cImN1cnJlbnRTaXplXCIgKGNoYW5nZSk9XCJjaGFuZ2VTaXplKGN1cnJlbnRTaXplKVwiPlxuXHRcdFx0XHRcdDxvcHRpb24gKm5nRm9yPVwibGV0IHNpemUgb2Ygc2l6ZXNcIiB2YWx1ZT1cInt7c2l6ZX19XCI+e3tzaXplfX08L29wdGlvbj5cbiAgICAgICAgPC9zZWxlY3Q+XG5cdFx0XHRcdDxidXR0b24gY2xhc3M9J2J0biBidG4taW5mbyBidG4tc20gbS1sLTFlbScgKGNsaWNrKT1cIm5leHRQYWdlKClcIiBbZGlzYWJsZWRdPVwiY3VycmVudFBhZ2UgPT09IHBhZ2VzTnVtYmVyXCI+PGkgY2xhc3M9XCJmYSBmYS1hbmdsZS1yaWdodFwiPjwvaT48L2J1dHRvbj5cblx0XHRcdFx0PGJ1dHRvbiBjbGFzcz0nYnRuIGJ0bi1pbmZvIGJ0bi1zbSBtLWwtMWVtJyAoY2xpY2spPVwibGFzdFBhZ2UoKVwiIFtkaXNhYmxlZF09XCJjdXJyZW50UGFnZSA9PT0gcGFnZXNOdW1iZXJcIj48aSBjbGFzcz1cImZhIGZhLWFuZ2xlLWRvdWJsZS1yaWdodFwiPjwvaT48L2J1dHRvbj5cblx0XHRcdDwvZGl2PlxuXHQ8L2Rpdj5cbjwvZGl2PlxuICBgLFxuICBzdHlsZXM6IFtgXG4gIC5tLWwtMWVtIHsgXG4gICAgbWFyZ2luLWxlZnQ6MWVtOyBcbiAgICB3aWR0aDogMjVweDtcbiAgfVxuICBcbiAgLnBhZ2VTaXplU2VsZWN0Qm94IHtcbiAgICBkaXNwbGF5OiAtd2Via2l0LWlubGluZS1ib3g7XG4gICAgd2lkdGg6IDExJTtcbiAgICBwYWRkaW5nOiA1cHg7IFxuICB9XG4gIFxuICBgXVxufSlcbmV4cG9ydCBjbGFzcyBSc1BhZ2luYXRpb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIEBJbnB1dCgpIGl0ZW1zOiBBcnJheTxhbnk+O1xuICBASW5wdXQoKSBjdXJyZW50U2l6ZSA6IG51bWJlcjtcblxuICBjdXJyZW50UGFnZTogbnVtYmVyID0gMSA7XG4gIHBhZ2VzTnVtYmVyOiBudW1iZXIgO1xuXG4gIHB1YmxpYyBzaXplcyA9IFs1LCAxMCwgMjBdXG4gIFxuICBAT3V0cHV0KCkgY2hhbmdlUGFnZSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55Pih0cnVlKTtcblxuICBjb25zdHJ1Y3RvcigpIHsgfVxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZih0aGlzLml0ZW1zICYmIHRoaXMuaXRlbXMubGVuZ3RoKXtcbiAgICAgIHRoaXMucGFnZXNOdW1iZXIgPSBNYXRoLmNlaWwodGhpcy5pdGVtcy5sZW5ndGggLyB0aGlzLmN1cnJlbnRTaXplKSA7XG4gICAgICB0aGlzLnNldFBhZ2UodGhpcy5jdXJyZW50UGFnZSk7XG4gICAgfVxuICB9XG5cblxuICBsYXN0UGFnZSgpOiB2b2lkIHtcbiAgICB0aGlzLmN1cnJlbnRQYWdlID0gdGhpcy5wYWdlc051bWJlciA7IFxuICAgIHRoaXMuc2V0UGFnZSh0aGlzLmN1cnJlbnRQYWdlKTtcbiAgfVxuXG4gIGZpcnN0UGFnZSgpOiB2b2lkIHtcbiAgICB0aGlzLmN1cnJlbnRQYWdlID0gMSA7IFxuICAgIHRoaXMuc2V0UGFnZSh0aGlzLmN1cnJlbnRQYWdlKTtcbiAgfVxuXG4gIHByZXZpb3VzUGFnZSgpOiB2b2lkIHtcbiAgICB0aGlzLmN1cnJlbnRQYWdlID0gdGhpcy5jdXJyZW50UGFnZSAtIDEgO1xuICAgIHRoaXMuc2V0UGFnZSh0aGlzLmN1cnJlbnRQYWdlKTtcbiAgfVxuXG4gIG5leHRQYWdlKCk6IHZvaWQge1xuICAgIHRoaXMuY3VycmVudFBhZ2UgPSB0aGlzLmN1cnJlbnRQYWdlICsgMSA7XG4gICAgdGhpcy5zZXRQYWdlKHRoaXMuY3VycmVudFBhZ2UpO1xuICB9XG5cbiAgIGNoYW5nZVNpemUoc2l6ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5zZXRTaXplKHNpemUpO1xuICB9XG5cblxuICBwcml2YXRlIHNldFBhZ2UocGFnZTogbnVtYmVyKSB7XG4gICAgbGV0IHBhZ2VyID0gcGFnaW5hdGUodGhpcy5pdGVtcy5sZW5ndGgsIHBhZ2UsIHRoaXMuY3VycmVudFNpemUpO1xuICAgIHRoaXMuY3VycmVudFBhZ2UgPSBwYWdlci5jdXJyZW50UGFnZSA7XG4gICAgdGhpcy5wYWdlc051bWJlciA9IHBhZ2VyLnRvdGFsUGFnZXMgO1xuICAgIHZhciBwYWdlT2ZJdGVtcyA9IHRoaXMuaXRlbXMuc2xpY2UocGFnZXIuc3RhcnRJbmRleCwgcGFnZXIuZW5kSW5kZXggKyAxKTtcbiAgICB0aGlzLmNoYW5nZVBhZ2UuZW1pdChwYWdlT2ZJdGVtcyk7XG4gIH1cblxuICBwcml2YXRlIHNldFNpemUoc2l6ZTogbnVtYmVyKSB7XG4gICAgbGV0IHBhZ2VyID0gcGFnaW5hdGUodGhpcy5pdGVtcy5sZW5ndGgsIHRoaXMuY3VycmVudFBhZ2UgLHNpemUpO1xuICAgIHRoaXMuY3VycmVudFBhZ2UgPSBwYWdlci5jdXJyZW50UGFnZSA7XG4gICAgdGhpcy5wYWdlc051bWJlciA9IHBhZ2VyLnRvdGFsUGFnZXMgO1xuICAgIHZhciBwYWdlT2ZJdGVtcyA9IHRoaXMuaXRlbXMuc2xpY2UocGFnZXIuc3RhcnRJbmRleCwgcGFnZXIuZW5kSW5kZXggKyAxKTtcbiAgICB0aGlzLmNoYW5nZVBhZ2UuZW1pdChwYWdlT2ZJdGVtcyk7XG4gIH1cblxufVxuIiwiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJzUGFnaW5hdGlvbkxpYkNvbXBvbmVudCB9IGZyb20gJy4vcnMtcGFnaW5hdGlvbi1saWIuY29tcG9uZW50JztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFJzUGFnaW5hdGlvbkNvbXBvbmVudCB9IGZyb20gJy4vdjIvcnMtcGFnaW5hdGlvbi5jb21wb25lbnQnO1xuLyoqXG4gKiBBdXRob3IgOiByb21kaGFuaXNhbWlyOTRAZ21haWwuY29tXG4gKi9cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIFJzUGFnaW5hdGlvbkxpYkNvbXBvbmVudCxcbiAgICBSc1BhZ2luYXRpb25Db21wb25lbnRcbiAgXSxcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZSxcbiAgICBGb3Jtc01vZHVsZVxuICBdLFxuICBleHBvcnRzOiBbXG4gICAgUnNQYWdpbmF0aW9uTGliQ29tcG9uZW50LFxuICAgIFJzUGFnaW5hdGlvbkNvbXBvbmVudFxuICBdXG59KVxuZXhwb3J0IGNsYXNzIFJzUGFnaW5hdGlvbk1vZHVsZSB7IH1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtJQU1FO0tBQWlCOztnQkFMbEIsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7Ozs7aUNBSEQ7Ozs7Ozs7QUNBQTs7Ozs7O0lBa0RFLGtDQUNVLGdCQUNBO1FBREEsbUJBQWMsR0FBZCxjQUFjO1FBQ2QsV0FBTSxHQUFOLE1BQU07cUJBSkQsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQztLQUtyQjs7OztJQUVMLDJDQUFROzs7SUFBUjtLQUNDOzs7O0lBR0QsMkNBQVE7OztJQUFSO1FBQ0UsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUNyQjtZQUNFLFVBQVUsRUFBRSxJQUFJLENBQUMsY0FBYztZQUMvQixXQUFXLEVBQUUsRUFBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBQztZQUNyQyxtQkFBbUIsRUFBRSxPQUFPO1NBQzdCLENBQUMsQ0FBQztLQUNOOzs7O0lBRUQsNENBQVM7OztJQUFUO1FBQ0UsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUNyQjtZQUNFLFVBQVUsRUFBRSxJQUFJLENBQUMsY0FBYztZQUMvQixXQUFXLEVBQUUsRUFBQyxJQUFJLEVBQUUsQ0FBQyxFQUFDO1lBQ3RCLG1CQUFtQixFQUFFLE9BQU87U0FDN0IsQ0FBQyxDQUFDO0tBQ047Ozs7SUFFRCwrQ0FBWTs7O0lBQVo7UUFDRSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQ3JCO1lBQ0UsVUFBVSxFQUFFLElBQUksQ0FBQyxjQUFjO1lBQy9CLFdBQVcsRUFBRSxFQUFDLElBQUksRUFBRSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUM7WUFDaEMsbUJBQW1CLEVBQUUsT0FBTztTQUM3QixDQUFDLENBQUM7S0FDTjs7OztJQUVELDJDQUFROzs7SUFBUjtRQUNFLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFDckI7WUFDRSxVQUFVLEVBQUUsSUFBSSxDQUFDLGNBQWM7WUFDL0IsV0FBVyxFQUFFLEVBQUMsSUFBSSxFQUFFLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBQztZQUNoQyxtQkFBbUIsRUFBRSxPQUFPO1NBQzdCLENBQUMsQ0FBQztLQUNOOzs7O0lBRUEsNkNBQVU7OztJQUFWO1FBQ0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUNyQjtZQUNFLFVBQVUsRUFBRSxJQUFJLENBQUMsY0FBYztZQUMvQixXQUFXLEVBQUUsRUFBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBQztZQUNyQyxtQkFBbUIsRUFBRSxPQUFPO1NBQzdCLENBQUMsQ0FBQztLQUNOOztnQkE5RkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxtQkFBbUI7b0JBQzdCLFFBQVEsRUFBRSw0c0NBaUJUOzZCQUNRLCtLQVlSO2lCQUNGOzs7O2dCQXhDUSxjQUFjO2dCQUFFLE1BQU07Ozt1QkEyQzVCLEtBQUs7OEJBQ0wsS0FBSzs4QkFDTCxLQUFLOzttQ0E5Q1I7Ozs7Ozs7Ozs7Ozs7O0FDQUEsa0JBQ0ksVUFBa0IsRUFDbEIsV0FBdUIsRUFDdkIsUUFBb0IsRUFDcEIsUUFBcUI7SUFGckIsNEJBQUEsRUFBQSxlQUF1QjtJQUN2Qix5QkFBQSxFQUFBLFlBQW9CO0lBQ3BCLHlCQUFBLEVBQUEsYUFBcUI7O0lBR3JCLElBQUksVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQyxDQUFDOztJQUdsRCxJQUFJLFdBQVcsR0FBRyxDQUFDLEVBQUU7UUFDakIsV0FBVyxHQUFHLENBQUMsQ0FBQztLQUNuQjtTQUFNLElBQUksV0FBVyxHQUFHLFVBQVUsRUFBRTtRQUNqQyxXQUFXLEdBQUcsVUFBVSxDQUFDO0tBQzVCOztJQUVELElBQUksU0FBUyxDQUEwQjs7SUFBdkMsSUFBdUIsT0FBTyxDQUFTO0lBQ3ZDLElBQUksVUFBVSxJQUFJLFFBQVEsRUFBRTs7UUFFMUIsU0FBUyxHQUFHLENBQUMsQ0FBQztRQUNkLE9BQU8sR0FBRyxVQUFVLENBQUM7S0FDdEI7U0FBTTs7UUFFTCxJQUFJLHlCQUF5QixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDOztRQUN6RCxJQUFJLHdCQUF3QixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMzRCxJQUFJLFdBQVcsSUFBSSx5QkFBeUIsRUFBRTs7WUFFNUMsU0FBUyxHQUFHLENBQUMsQ0FBQztZQUNkLE9BQU8sR0FBRyxRQUFRLENBQUM7U0FDcEI7YUFBTSxJQUFJLFdBQVcsR0FBRyx3QkFBd0IsSUFBSSxVQUFVLEVBQUU7O1lBRS9ELFNBQVMsR0FBRyxVQUFVLEdBQUcsUUFBUSxHQUFHLENBQUMsQ0FBQztZQUN0QyxPQUFPLEdBQUcsVUFBVSxDQUFDO1NBQ3RCO2FBQU07O1lBRUwsU0FBUyxHQUFHLFdBQVcsR0FBRyx5QkFBeUIsQ0FBQztZQUNwRCxPQUFPLEdBQUcsV0FBVyxHQUFHLHdCQUF3QixDQUFDO1NBQ2xEO0tBQ0Y7O0lBR0QsSUFBSSxVQUFVLEdBQUcsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxJQUFJLFFBQVEsQ0FBQzs7SUFDOUMsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUcsUUFBUSxHQUFHLENBQUMsRUFBRSxVQUFVLEdBQUcsQ0FBQyxDQUFDLENBQUM7O0lBR25FLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxHQUFHLENBQUMsSUFBSSxTQUFTLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLFNBQVMsR0FBRyxDQUFDLEdBQUEsQ0FBQyxDQUFDOztJQUd4RixPQUFPO1FBQ0wsVUFBVSxFQUFFLFVBQVU7UUFDdEIsV0FBVyxFQUFFLFdBQVc7UUFDeEIsUUFBUSxFQUFFLFFBQVE7UUFDbEIsVUFBVSxFQUFFLFVBQVU7UUFDdEIsU0FBUyxFQUFFLFNBQVM7UUFDcEIsT0FBTyxFQUFFLE9BQU87UUFDaEIsVUFBVSxFQUFFLFVBQVU7UUFDdEIsUUFBUSxFQUFFLFFBQVE7UUFDbEIsS0FBSyxFQUFFLEtBQUs7S0FDYixDQUFDO0NBQ0g7Ozs7OztBQzNESDs7Ozs7O0lBdURFOzJCQVBzQixDQUFDO3FCQUdSLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUM7MEJBRUgsSUFBSSxZQUFZLENBQU0sSUFBSSxDQUFDO0tBRWpDOzs7O0lBQ2pCLHdDQUFROzs7SUFBUjtLQUNDOzs7OztJQUVELDJDQUFXOzs7O0lBQVgsVUFBWSxPQUFzQjtRQUNoQyxJQUFHLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUM7WUFDakMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBRTtZQUNwRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNoQztLQUNGOzs7O0lBR0Qsd0NBQVE7OztJQUFSO1FBQ0UsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFFO1FBQ3JDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0tBQ2hDOzs7O0lBRUQseUNBQVM7OztJQUFUO1FBQ0UsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUU7UUFDdEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDaEM7Ozs7SUFFRCw0Q0FBWTs7O0lBQVo7UUFDRSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFFO1FBQ3pDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0tBQ2hDOzs7O0lBRUQsd0NBQVE7OztJQUFSO1FBQ0UsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBRTtRQUN6QyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztLQUNoQzs7Ozs7SUFFQSwwQ0FBVTs7OztJQUFWLFVBQVcsSUFBWTtRQUN0QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3BCOzs7OztJQUdPLHVDQUFPOzs7O2NBQUMsSUFBWTs7UUFDMUIsSUFBSSxLQUFLLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFFO1FBQ3RDLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBRTs7UUFDckMsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3pFLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDOzs7Ozs7SUFHNUIsdUNBQU87Ozs7Y0FBQyxJQUFZOztRQUMxQixJQUFJLEtBQUssR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNoRSxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUU7UUFDdEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFFOztRQUNyQyxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDekUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7OztnQkFqR3JDLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsZUFBZTtvQkFDekIsUUFBUSxFQUFFLGl2Q0FrQlQ7NkJBQ1EsK0tBWVI7aUJBQ0Y7Ozs7O3dCQUdFLEtBQUs7OEJBQ0wsS0FBSzs2QkFPTCxNQUFNOztnQ0FyRFQ7Ozs7Ozs7QUNBQTs7Ozs7OztnQkFRQyxRQUFRLFNBQUM7b0JBQ1IsWUFBWSxFQUFFO3dCQUNaLHdCQUF3Qjt3QkFDeEIscUJBQXFCO3FCQUN0QjtvQkFDRCxPQUFPLEVBQUU7d0JBQ1AsWUFBWTt3QkFDWixXQUFXO3FCQUNaO29CQUNELE9BQU8sRUFBRTt3QkFDUCx3QkFBd0I7d0JBQ3hCLHFCQUFxQjtxQkFDdEI7aUJBQ0Y7OzZCQXJCRDs7Ozs7Ozs7Ozs7Ozs7OyJ9