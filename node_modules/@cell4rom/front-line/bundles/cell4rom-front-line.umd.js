(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/router'), require('@angular/common'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('@cell4rom/front-line', ['exports', '@angular/core', '@angular/router', '@angular/common', '@angular/forms'], factory) :
    (factory((global.cell4rom = global.cell4rom || {}, global.cell4rom['front-line'] = {}),global.ng.core,global.ng.router,global.ng.common,global.ng.forms));
}(this, (function (exports,i0,router,common,forms) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var RsPaginationLibService = (function () {
        function RsPaginationLibService() {
        }
        RsPaginationLibService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        RsPaginationLibService.ctorParameters = function () { return []; };
        /** @nocollapse */ RsPaginationLibService.ngInjectableDef = i0.defineInjectable({ factory: function RsPaginationLibService_Factory() { return new RsPaginationLibService(); }, token: RsPaginationLibService, providedIn: "root" });
        return RsPaginationLibService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * #### Pagination within API RSET
     *
     * Author : romdhanisamir94\@gmail.com
     */
    var RsPaginationLibComponent = (function () {
        function RsPaginationLibComponent(activatedRoute, router$$1) {
            this.activatedRoute = activatedRoute;
            this.router = router$$1;
            this.sizes = [5, 10, 20];
        }
        /**
         * @return {?}
         */
        RsPaginationLibComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        RsPaginationLibComponent.prototype.lastPage = /**
         * @return {?}
         */
            function () {
                this.router.navigate([], {
                    relativeTo: this.activatedRoute,
                    queryParams: { page: this.pagesNumber },
                    queryParamsHandling: "merge"
                });
            };
        /**
         * @return {?}
         */
        RsPaginationLibComponent.prototype.firstPage = /**
         * @return {?}
         */
            function () {
                this.router.navigate([], {
                    relativeTo: this.activatedRoute,
                    queryParams: { page: 1 },
                    queryParamsHandling: "merge"
                });
            };
        /**
         * @return {?}
         */
        RsPaginationLibComponent.prototype.previousPage = /**
         * @return {?}
         */
            function () {
                this.router.navigate([], {
                    relativeTo: this.activatedRoute,
                    queryParams: { page: --this.page },
                    queryParamsHandling: "merge"
                });
            };
        /**
         * @return {?}
         */
        RsPaginationLibComponent.prototype.nextPage = /**
         * @return {?}
         */
            function () {
                this.router.navigate([], {
                    relativeTo: this.activatedRoute,
                    queryParams: { page: ++this.page },
                    queryParamsHandling: "merge"
                });
            };
        /**
         * @return {?}
         */
        RsPaginationLibComponent.prototype.changeSize = /**
         * @return {?}
         */
            function () {
                this.router.navigate([], {
                    relativeTo: this.activatedRoute,
                    queryParams: { size: this.currentSize },
                    queryParamsHandling: "merge"
                });
            };
        RsPaginationLibComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'rs-pagination-api',
                        template: "\n  <div *ngIf=\"pagesNumber >= 1\">\n\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<button class='btn btn-info btn-sm m-l-1em' (click)=\"firstPage()\" [disabled]=\"page === 1\"><i class=\"fa fa-angle-double-left\"></i></button>\n\t\t\t\t<button class='btn btn-info btn-sm m-l-1em' (click)=\"previousPage()\" [disabled]=\"page == 1\"><i class=\"fa fa-angle-left\"></i></button>\n\t\t\t\t<span style=\"margin-left: 10px;margin-right: 10px;\">Page {{page}}/{{pagesNumber}}</span> \n\t\t\t\t<span>  </span>\n        <span style=\"margin-left: 10px;margin-right: 10px;\">Size</span>\n\t\t\t\t<select class=\"form-control form-control-sm pageSizeSelectBox\" id=\"currentSize\" name=\"currentSize\" [(ngModel)]=\"currentSize\" (change)=\"changeSize()\">\n\t\t\t\t\t<option *ngFor=\"let size of sizes\" value=\"{{size}}\">{{size}}</option>\n        </select>\n\t\t\t\t<button class='btn btn-info btn-sm m-l-1em' (click)=\"nextPage()\" [disabled]=\"page === pagesNumber\"><i class=\"fa fa-angle-right\"></i></button>\n\t\t\t\t<button class='btn btn-info btn-sm m-l-1em' (click)=\"lastPage()\" [disabled]=\"page === pagesNumber\"><i class=\"fa fa-angle-double-right\"></i></button>\n\t\t\t</div>\n\t</div>\n</div>\n  ",
                        styles: ["\n  .m-l-1em { \n    margin-left:1em; \n    width: 25px;\n  }\n  \n  .pageSizeSelectBox {\n    display: -webkit-inline-box;\n    width: 11%;\n    padding: 5px; \n  }\n  \n  "]
                    }] }
        ];
        /** @nocollapse */
        RsPaginationLibComponent.ctorParameters = function () {
            return [
                { type: router.ActivatedRoute },
                { type: router.Router }
            ];
        };
        RsPaginationLibComponent.propDecorators = {
            page: [{ type: i0.Input }],
            pagesNumber: [{ type: i0.Input }],
            currentSize: [{ type: i0.Input }]
        };
        return RsPaginationLibComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @param {?} totalItems
     * @param {?=} currentPage
     * @param {?=} pageSize
     * @param {?=} maxPages
     * @return {?}
     */
    function paginate(totalItems, currentPage, pageSize, maxPages) {
        if (currentPage === void 0) {
            currentPage = 1;
        }
        if (pageSize === void 0) {
            pageSize = 5;
        }
        if (maxPages === void 0) {
            maxPages = 10;
        }
        /** @type {?} */
        var totalPages = Math.ceil(totalItems / pageSize);
        // ensure current page isn't out of range
        if (currentPage < 1) {
            currentPage = 1;
        }
        else if (currentPage > totalPages) {
            currentPage = totalPages;
        }
        /** @type {?} */
        var startPage;
        /** @type {?} */
        var endPage;
        if (totalPages <= maxPages) {
            // total pages less than max so show all pages
            startPage = 1;
            endPage = totalPages;
        }
        else {
            /** @type {?} */
            var maxPagesBeforeCurrentPage = Math.floor(maxPages / 2);
            /** @type {?} */
            var maxPagesAfterCurrentPage = Math.ceil(maxPages / 2) - 1;
            if (currentPage <= maxPagesBeforeCurrentPage) {
                // current page near the start
                startPage = 1;
                endPage = maxPages;
            }
            else if (currentPage + maxPagesAfterCurrentPage >= totalPages) {
                // current page near the end
                startPage = totalPages - maxPages + 1;
                endPage = totalPages;
            }
            else {
                // current page somewhere in the middle
                startPage = currentPage - maxPagesBeforeCurrentPage;
                endPage = currentPage + maxPagesAfterCurrentPage;
            }
        }
        /** @type {?} */
        var startIndex = (currentPage - 1) * pageSize;
        /** @type {?} */
        var endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);
        /** @type {?} */
        var pages = Array.from(Array((endPage + 1) - startPage).keys()).map(function (i) { return startPage + i; });
        // return object with all pager properties required by the view
        return {
            totalItems: totalItems,
            currentPage: currentPage,
            pageSize: pageSize,
            totalPages: totalPages,
            startPage: startPage,
            endPage: endPage,
            startIndex: startIndex,
            endIndex: endIndex,
            pages: pages
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * #### Pagination without API RSET
     *
     * Author : romdhanisamir94\@gmail.com
     */
    var RsPaginationComponent = (function () {
        function RsPaginationComponent() {
            this.currentPage = 1;
            this.sizes = [5, 10, 20];
            this.changePage = new i0.EventEmitter(true);
        }
        /**
         * @return {?}
         */
        RsPaginationComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        RsPaginationComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (this.items && this.items.length) {
                    this.pagesNumber = Math.ceil(this.items.length / this.currentSize);
                    this.setPage(this.currentPage);
                }
            };
        /**
         * @return {?}
         */
        RsPaginationComponent.prototype.lastPage = /**
         * @return {?}
         */
            function () {
                this.currentPage = this.pagesNumber;
                this.setPage(this.currentPage);
            };
        /**
         * @return {?}
         */
        RsPaginationComponent.prototype.firstPage = /**
         * @return {?}
         */
            function () {
                this.currentPage = 1;
                this.setPage(this.currentPage);
            };
        /**
         * @return {?}
         */
        RsPaginationComponent.prototype.previousPage = /**
         * @return {?}
         */
            function () {
                this.currentPage = this.currentPage - 1;
                this.setPage(this.currentPage);
            };
        /**
         * @return {?}
         */
        RsPaginationComponent.prototype.nextPage = /**
         * @return {?}
         */
            function () {
                this.currentPage = this.currentPage + 1;
                this.setPage(this.currentPage);
            };
        /**
         * @param {?} size
         * @return {?}
         */
        RsPaginationComponent.prototype.changeSize = /**
         * @param {?} size
         * @return {?}
         */
            function (size) {
                this.setSize(size);
            };
        /**
         * @param {?} page
         * @return {?}
         */
        RsPaginationComponent.prototype.setPage = /**
         * @param {?} page
         * @return {?}
         */
            function (page) {
                /** @type {?} */
                var pager = paginate(this.items.length, page, this.currentSize);
                this.currentPage = pager.currentPage;
                this.pagesNumber = pager.totalPages;
                /** @type {?} */
                var pageOfItems = this.items.slice(pager.startIndex, pager.endIndex + 1);
                this.changePage.emit(pageOfItems);
            };
        /**
         * @param {?} size
         * @return {?}
         */
        RsPaginationComponent.prototype.setSize = /**
         * @param {?} size
         * @return {?}
         */
            function (size) {
                /** @type {?} */
                var pager = paginate(this.items.length, this.currentPage, size);
                this.currentPage = pager.currentPage;
                this.pagesNumber = pager.totalPages;
                /** @type {?} */
                var pageOfItems = this.items.slice(pager.startIndex, pager.endIndex + 1);
                this.changePage.emit(pageOfItems);
            };
        RsPaginationComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'rs-pagination',
                        template: "\n  <div>\n\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<button class='btn btn-info btn-sm m-l-1em' (click)=\"firstPage()\" [disabled]=\"currentPage === 1\"><i class=\"fa fa-angle-double-left\"></i></button>\n\t\t\t\t<button class='btn btn-info btn-sm m-l-1em' (click)=\"previousPage()\" [disabled]=\"currentPage == 1\"><i class=\"fa fa-angle-left\"></i></button>\n\t\t\t\t<span style=\"margin-left: 10px;margin-right: 10px;\">Page {{currentPage}}/{{pagesNumber}}</span> \n\t\t\t\t<span>  </span>\n        <span style=\"margin-left: 10px;margin-right: 10px;\">Size</span>\n        <select class=\"form-control form-control-sm pageSizeSelectBox\" id=\"currentSize\" \n                name=\"currentSize\" [(ngModel)]=\"currentSize\" (change)=\"changeSize(currentSize)\">\n\t\t\t\t\t<option *ngFor=\"let size of sizes\" value=\"{{size}}\">{{size}}</option>\n        </select>\n\t\t\t\t<button class='btn btn-info btn-sm m-l-1em' (click)=\"nextPage()\" [disabled]=\"currentPage === pagesNumber\"><i class=\"fa fa-angle-right\"></i></button>\n\t\t\t\t<button class='btn btn-info btn-sm m-l-1em' (click)=\"lastPage()\" [disabled]=\"currentPage === pagesNumber\"><i class=\"fa fa-angle-double-right\"></i></button>\n\t\t\t</div>\n\t</div>\n</div>\n  ",
                        styles: ["\n  .m-l-1em { \n    margin-left:1em; \n    width: 25px;\n  }\n  \n  .pageSizeSelectBox {\n    display: -webkit-inline-box;\n    width: 11%;\n    padding: 5px; \n  }\n  \n  "]
                    }] }
        ];
        /** @nocollapse */
        RsPaginationComponent.ctorParameters = function () { return []; };
        RsPaginationComponent.propDecorators = {
            items: [{ type: i0.Input }],
            currentSize: [{ type: i0.Input }],
            changePage: [{ type: i0.Output }]
        };
        return RsPaginationComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * Author : romdhanisamir94\@gmail.com
     */
    var RsPaginationModule = (function () {
        function RsPaginationModule() {
        }
        RsPaginationModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [
                            RsPaginationLibComponent,
                            RsPaginationComponent
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule
                        ],
                        exports: [
                            RsPaginationLibComponent,
                            RsPaginationComponent
                        ]
                    },] }
        ];
        return RsPaginationModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.RsPaginationLibService = RsPaginationLibService;
    exports.RsPaginationLibComponent = RsPaginationLibComponent;
    exports.RsPaginationModule = RsPaginationModule;
    exports.ɵa = RsPaginationComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,