{"version":3,"sources":["ng://@cell4rom/front-line/lib/rs-pagination-lib.service.ts","ng://@cell4rom/front-line/lib/rs-pagination-lib.component.ts","ng://@cell4rom/front-line/lib/v2/rs-model.ts","ng://@cell4rom/front-line/lib/v2/rs-pagination.component.ts","ng://@cell4rom/front-line/lib/rs-pagination-lib.module.ts"],"names":["RsPaginationLibService","Injectable","args","providedIn","RsPaginationLibComponent","prototype","ngOnInit","lastPage","this","router","navigate","relativeTo","activatedRoute","queryParams","page","pagesNumber","queryParamsHandling","firstPage","previousPage","nextPage","changeSize","size","currentSize","Component","selector","template","ActivatedRoute","Router","Input","paginate","totalItems","currentPage","pageSize","maxPages","startPage","endPage","totalPages","Math","ceil","maxPagesBeforeCurrentPage","floor","maxPagesAfterCurrentPage","startIndex","endIndex","min","pages","Array","from","keys","map","i","RsPaginationComponent","ngOnChanges","changes","items","length","setPage","setSize","pager","pageOfItems","slice","changePage","emit","Output","EventEmitter","NgModule","declarations","imports","CommonModule","FormsModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n@Injectable({\n  providedIn: 'root'\n})\nexport class RsPaginationLibService {\n\n  constructor() { }\n\n}\n","import { Component, OnInit, Input } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n/**\n * #### Pagination within API RSET\n * \n * Author : romdhanisamir94@gmail.com\n */\n@Component({\n  selector: 'rs-pagination-api',\n  template: `\n  <div *ngIf=\"pagesNumber >= 1\">\n\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<button class='btn btn-info btn-sm m-l-1em' (click)=\"firstPage()\" [disabled]=\"page === 1\"><i class=\"fa fa-angle-double-left\"></i></button>\n\t\t\t\t<button class='btn btn-info btn-sm m-l-1em' (click)=\"previousPage()\" [disabled]=\"page == 1\"><i class=\"fa fa-angle-left\"></i></button>\n\t\t\t\t<span style=\"margin-left: 10px;margin-right: 10px;\">Page {{page}}/{{pagesNumber}}</span> \n\t\t\t\t<span>  </span>\n        <span style=\"margin-left: 10px;margin-right: 10px;\">Size</span>\n\t\t\t\t<select class=\"form-control form-control-sm pageSizeSelectBox\" id=\"currentSize\" name=\"currentSize\" [(ngModel)]=\"currentSize\" (change)=\"changeSize()\">\n\t\t\t\t\t<option *ngFor=\"let size of sizes\" value=\"{{size}}\">{{size}}</option>\n        </select>\n\t\t\t\t<button class='btn btn-info btn-sm m-l-1em' (click)=\"nextPage()\" [disabled]=\"page === pagesNumber\"><i class=\"fa fa-angle-right\"></i></button>\n\t\t\t\t<button class='btn btn-info btn-sm m-l-1em' (click)=\"lastPage()\" [disabled]=\"page === pagesNumber\"><i class=\"fa fa-angle-double-right\"></i></button>\n\t\t\t</div>\n\t</div>\n</div>\n  `,\n  styles: [`\n  .m-l-1em { \n    margin-left:1em; \n    width: 25px;\n  }\n  \n  .pageSizeSelectBox {\n    display: -webkit-inline-box;\n    width: 11%;\n    padding: 5px; \n  }\n  \n  `]\n})\nexport class RsPaginationLibComponent implements OnInit {\n\n  @Input() page: number;\n  @Input() pagesNumber: number;\n  @Input() currentSize: number;\n\n  public sizes = [5, 10, 20]\n\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n  }\n\n  \n  lastPage(): void {\n    this.router.navigate([], \n      {\n        relativeTo: this.activatedRoute,\n        queryParams: {page: this.pagesNumber}, \n        queryParamsHandling: \"merge\"\n      });\n  }\n\n  firstPage(): void {\n    this.router.navigate([], \n      {\n        relativeTo: this.activatedRoute,\n        queryParams: {page: 1}, \n        queryParamsHandling: \"merge\"\n      });\n  }\n\n  previousPage(): void {\n    this.router.navigate([], \n      {\n        relativeTo: this.activatedRoute,\n        queryParams: {page: --this.page}, \n        queryParamsHandling: \"merge\"\n      });\n  }\n\n  nextPage(): void {\n    this.router.navigate([], \n      {\n        relativeTo: this.activatedRoute,\n        queryParams: {page: ++this.page}, \n        queryParamsHandling: \"merge\"\n      });\n  }\n\n   changeSize(): void {\n    this.router.navigate([], \n      {\n        relativeTo: this.activatedRoute,\n        queryParams: {size: this.currentSize}, \n        queryParamsHandling: \"merge\"\n      });\n  }\n\n}\n","export function paginate(\n    totalItems: number,\n    currentPage: number = 1,\n    pageSize: number = 5,\n    maxPages: number = 10\n  ) {\n    // calculate total pages\n    let totalPages = Math.ceil(totalItems / pageSize);\n  \n    // ensure current page isn't out of range\n    if (currentPage < 1) { \n        currentPage = 1; \n    } else if (currentPage > totalPages) { \n        currentPage = totalPages; \n    }\n  \n    let startPage: number, endPage: number;\n    if (totalPages <= maxPages) {\n      // total pages less than max so show all pages\n      startPage = 1;\n      endPage = totalPages;\n    } else {\n      // total pages more than max so calculate start and end pages\n      let maxPagesBeforeCurrentPage = Math.floor(maxPages / 2);\n      let maxPagesAfterCurrentPage = Math.ceil(maxPages / 2) - 1;\n      if (currentPage <= maxPagesBeforeCurrentPage) {\n        // current page near the start\n        startPage = 1;\n        endPage = maxPages;\n      } else if (currentPage + maxPagesAfterCurrentPage >= totalPages) {\n        // current page near the end\n        startPage = totalPages - maxPages + 1;\n        endPage = totalPages;\n      } else {\n        // current page somewhere in the middle\n        startPage = currentPage - maxPagesBeforeCurrentPage;\n        endPage = currentPage + maxPagesAfterCurrentPage;\n      }\n    }\n  \n    // calculate start and end item indexes\n    let startIndex = (currentPage - 1) * pageSize;\n    let endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n  \n    // create an array of pages to ng-repeat in the pager control\n    let pages = Array.from(Array((endPage + 1) - startPage).keys()).map(i => startPage + i);\n  \n    // return object with all pager properties required by the view\n    return {\n      totalItems: totalItems,\n      currentPage: currentPage,\n      pageSize: pageSize,\n      totalPages: totalPages,\n      startPage: startPage,\n      endPage: endPage,\n      startIndex: startIndex,\n      endIndex: endIndex,\n      pages: pages\n    };\n  }","import { Component, OnInit, EventEmitter, Input, SimpleChanges, Output } from '@angular/core';\nimport { paginate } from './rs-model';\n\n/**\n * #### Pagination without API RSET\n * \n * Author : romdhanisamir94@gmail.com\n */\n@Component({\n  selector: 'rs-pagination',\n  template: `\n  <div>\n\t<div class=\"row\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<button class='btn btn-info btn-sm m-l-1em' (click)=\"firstPage()\" [disabled]=\"currentPage === 1\"><i class=\"fa fa-angle-double-left\"></i></button>\n\t\t\t\t<button class='btn btn-info btn-sm m-l-1em' (click)=\"previousPage()\" [disabled]=\"currentPage == 1\"><i class=\"fa fa-angle-left\"></i></button>\n\t\t\t\t<span style=\"margin-left: 10px;margin-right: 10px;\">Page {{currentPage}}/{{pagesNumber}}</span> \n\t\t\t\t<span>  </span>\n        <span style=\"margin-left: 10px;margin-right: 10px;\">Size</span>\n        <select class=\"form-control form-control-sm pageSizeSelectBox\" id=\"currentSize\" \n                name=\"currentSize\" [(ngModel)]=\"currentSize\" (change)=\"changeSize(currentSize)\">\n\t\t\t\t\t<option *ngFor=\"let size of sizes\" value=\"{{size}}\">{{size}}</option>\n        </select>\n\t\t\t\t<button class='btn btn-info btn-sm m-l-1em' (click)=\"nextPage()\" [disabled]=\"currentPage === pagesNumber\"><i class=\"fa fa-angle-right\"></i></button>\n\t\t\t\t<button class='btn btn-info btn-sm m-l-1em' (click)=\"lastPage()\" [disabled]=\"currentPage === pagesNumber\"><i class=\"fa fa-angle-double-right\"></i></button>\n\t\t\t</div>\n\t</div>\n</div>\n  `,\n  styles: [`\n  .m-l-1em { \n    margin-left:1em; \n    width: 25px;\n  }\n  \n  .pageSizeSelectBox {\n    display: -webkit-inline-box;\n    width: 11%;\n    padding: 5px; \n  }\n  \n  `]\n})\nexport class RsPaginationComponent implements OnInit {\n\n  @Input() items: Array<any>;\n  @Input() currentSize : number;\n\n  currentPage: number = 1 ;\n  pagesNumber: number ;\n\n  public sizes = [5, 10, 20]\n  \n  @Output() changePage = new EventEmitter<any>(true);\n\n  constructor() { }\n  ngOnInit(): void {\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if(this.items && this.items.length){\n      this.pagesNumber = Math.ceil(this.items.length / this.currentSize) ;\n      this.setPage(this.currentPage);\n    }\n  }\n\n\n  lastPage(): void {\n    this.currentPage = this.pagesNumber ; \n    this.setPage(this.currentPage);\n  }\n\n  firstPage(): void {\n    this.currentPage = 1 ; \n    this.setPage(this.currentPage);\n  }\n\n  previousPage(): void {\n    this.currentPage = this.currentPage - 1 ;\n    this.setPage(this.currentPage);\n  }\n\n  nextPage(): void {\n    this.currentPage = this.currentPage + 1 ;\n    this.setPage(this.currentPage);\n  }\n\n   changeSize(size: number): void {\n    this.setSize(size);\n  }\n\n\n  private setPage(page: number) {\n    let pager = paginate(this.items.length, page, this.currentSize);\n    this.currentPage = pager.currentPage ;\n    this.pagesNumber = pager.totalPages ;\n    var pageOfItems = this.items.slice(pager.startIndex, pager.endIndex + 1);\n    this.changePage.emit(pageOfItems);\n  }\n\n  private setSize(size: number) {\n    let pager = paginate(this.items.length, this.currentPage ,size);\n    this.currentPage = pager.currentPage ;\n    this.pagesNumber = pager.totalPages ;\n    var pageOfItems = this.items.slice(pager.startIndex, pager.endIndex + 1);\n    this.changePage.emit(pageOfItems);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { RsPaginationLibComponent } from './rs-pagination-lib.component';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RsPaginationComponent } from './v2/rs-pagination.component';\n/**\n * Author : romdhanisamir94@gmail.com\n */\n@NgModule({\n  declarations: [\n    RsPaginationLibComponent,\n    RsPaginationComponent\n  ],\n  imports: [\n    CommonModule,\n    FormsModule\n  ],\n  exports: [\n    RsPaginationLibComponent,\n    RsPaginationComponent\n  ]\n})\nexport class RsPaginationModule { }\n"]}