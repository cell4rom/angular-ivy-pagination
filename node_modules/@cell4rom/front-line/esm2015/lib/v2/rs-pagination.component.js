/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { paginate } from './rs-model';
/**
 * #### Pagination without API RSET
 *
 * Author : romdhanisamir94\@gmail.com
 */
export class RsPaginationComponent {
    constructor() {
        this.currentPage = 1;
        this.sizes = [5, 10, 20];
        this.changePage = new EventEmitter(true);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.items && this.items.length) {
            this.pagesNumber = Math.ceil(this.items.length / this.currentSize);
            this.setPage(this.currentPage);
        }
    }
    /**
     * @return {?}
     */
    lastPage() {
        this.currentPage = this.pagesNumber;
        this.setPage(this.currentPage);
    }
    /**
     * @return {?}
     */
    firstPage() {
        this.currentPage = 1;
        this.setPage(this.currentPage);
    }
    /**
     * @return {?}
     */
    previousPage() {
        this.currentPage = this.currentPage - 1;
        this.setPage(this.currentPage);
    }
    /**
     * @return {?}
     */
    nextPage() {
        this.currentPage = this.currentPage + 1;
        this.setPage(this.currentPage);
    }
    /**
     * @param {?} size
     * @return {?}
     */
    changeSize(size) {
        this.setSize(size);
    }
    /**
     * @param {?} page
     * @return {?}
     */
    setPage(page) {
        /** @type {?} */
        let pager = paginate(this.items.length, page, this.currentSize);
        this.currentPage = pager.currentPage;
        this.pagesNumber = pager.totalPages;
        /** @type {?} */
        var pageOfItems = this.items.slice(pager.startIndex, pager.endIndex + 1);
        this.changePage.emit(pageOfItems);
    }
    /**
     * @param {?} size
     * @return {?}
     */
    setSize(size) {
        /** @type {?} */
        let pager = paginate(this.items.length, this.currentPage, size);
        this.currentPage = pager.currentPage;
        this.pagesNumber = pager.totalPages;
        /** @type {?} */
        var pageOfItems = this.items.slice(pager.startIndex, pager.endIndex + 1);
        this.changePage.emit(pageOfItems);
    }
}
RsPaginationComponent.decorators = [
    { type: Component, args: [{
                selector: 'rs-pagination',
                template: `
  <div>
	<div class="row">
			<div class="col-md-12">
				<button class='btn btn-info btn-sm m-l-1em' (click)="firstPage()" [disabled]="currentPage === 1"><i class="fa fa-angle-double-left"></i></button>
				<button class='btn btn-info btn-sm m-l-1em' (click)="previousPage()" [disabled]="currentPage == 1"><i class="fa fa-angle-left"></i></button>
				<span style="margin-left: 10px;margin-right: 10px;">Page {{currentPage}}/{{pagesNumber}}</span> 
				<span>  </span>
        <span style="margin-left: 10px;margin-right: 10px;">Size</span>
        <select class="form-control form-control-sm pageSizeSelectBox" id="currentSize" 
                name="currentSize" [(ngModel)]="currentSize" (change)="changeSize(currentSize)">
					<option *ngFor="let size of sizes" value="{{size}}">{{size}}</option>
        </select>
				<button class='btn btn-info btn-sm m-l-1em' (click)="nextPage()" [disabled]="currentPage === pagesNumber"><i class="fa fa-angle-right"></i></button>
				<button class='btn btn-info btn-sm m-l-1em' (click)="lastPage()" [disabled]="currentPage === pagesNumber"><i class="fa fa-angle-double-right"></i></button>
			</div>
	</div>
</div>
  `,
                styles: [`
  .m-l-1em { 
    margin-left:1em; 
    width: 25px;
  }
  
  .pageSizeSelectBox {
    display: -webkit-inline-box;
    width: 11%;
    padding: 5px; 
  }
  
  `]
            }] }
];
/** @nocollapse */
RsPaginationComponent.ctorParameters = () => [];
RsPaginationComponent.propDecorators = {
    items: [{ type: Input }],
    currentSize: [{ type: Input }],
    changePage: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    RsPaginationComponent.prototype.items;
    /** @type {?} */
    RsPaginationComponent.prototype.currentSize;
    /** @type {?} */
    RsPaginationComponent.prototype.currentPage;
    /** @type {?} */
    RsPaginationComponent.prototype.pagesNumber;
    /** @type {?} */
    RsPaginationComponent.prototype.sizes;
    /** @type {?} */
    RsPaginationComponent.prototype.changePage;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnMtcGFnaW5hdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AY2VsbDRyb20vZnJvbnQtbGluZS8iLCJzb3VyY2VzIjpbImxpYi92Mi9ycy1wYWdpbmF0aW9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxZQUFZLEVBQUUsS0FBSyxFQUFpQixNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUYsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQzs7Ozs7O0FBMEN0QyxNQUFNO0lBWUo7MkJBUHNCLENBQUM7cUJBR1IsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQzswQkFFSCxJQUFJLFlBQVksQ0FBTSxJQUFJLENBQUM7S0FFakM7Ozs7SUFDakIsUUFBUTtLQUNQOzs7OztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyxFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUEsQ0FBQztZQUNsQyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFFO1lBQ3BFLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ2hDO0tBQ0Y7Ozs7SUFHRCxRQUFRO1FBQ04sSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFFO1FBQ3JDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0tBQ2hDOzs7O0lBRUQsU0FBUztRQUNQLElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFFO1FBQ3RCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0tBQ2hDOzs7O0lBRUQsWUFBWTtRQUNWLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUU7UUFDekMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDaEM7Ozs7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBRTtRQUN6QyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztLQUNoQzs7Ozs7SUFFQSxVQUFVLENBQUMsSUFBWTtRQUN0QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3BCOzs7OztJQUdPLE9BQU8sQ0FBQyxJQUFZOztRQUMxQixJQUFJLEtBQUssR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNoRSxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUU7UUFDdEMsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFFOztRQUNyQyxJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDekUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7Ozs7OztJQUc1QixPQUFPLENBQUMsSUFBWTs7UUFDMUIsSUFBSSxLQUFLLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFFO1FBQ3RDLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBRTs7UUFDckMsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3pFLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDOzs7O1lBakdyQyxTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGVBQWU7Z0JBQ3pCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBa0JUO3lCQUNROzs7Ozs7Ozs7Ozs7R0FZUjthQUNGOzs7OztvQkFHRSxLQUFLOzBCQUNMLEtBQUs7eUJBT0wsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBFdmVudEVtaXR0ZXIsIElucHV0LCBTaW1wbGVDaGFuZ2VzLCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHBhZ2luYXRlIH0gZnJvbSAnLi9ycy1tb2RlbCc7XG5cbi8qKlxuICogIyMjIyBQYWdpbmF0aW9uIHdpdGhvdXQgQVBJIFJTRVRcbiAqIFxuICogQXV0aG9yIDogcm9tZGhhbmlzYW1pcjk0QGdtYWlsLmNvbVxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdycy1wYWdpbmF0aW9uJyxcbiAgdGVtcGxhdGU6IGBcbiAgPGRpdj5cblx0PGRpdiBjbGFzcz1cInJvd1wiPlxuXHRcdFx0PGRpdiBjbGFzcz1cImNvbC1tZC0xMlwiPlxuXHRcdFx0XHQ8YnV0dG9uIGNsYXNzPSdidG4gYnRuLWluZm8gYnRuLXNtIG0tbC0xZW0nIChjbGljayk9XCJmaXJzdFBhZ2UoKVwiIFtkaXNhYmxlZF09XCJjdXJyZW50UGFnZSA9PT0gMVwiPjxpIGNsYXNzPVwiZmEgZmEtYW5nbGUtZG91YmxlLWxlZnRcIj48L2k+PC9idXR0b24+XG5cdFx0XHRcdDxidXR0b24gY2xhc3M9J2J0biBidG4taW5mbyBidG4tc20gbS1sLTFlbScgKGNsaWNrKT1cInByZXZpb3VzUGFnZSgpXCIgW2Rpc2FibGVkXT1cImN1cnJlbnRQYWdlID09IDFcIj48aSBjbGFzcz1cImZhIGZhLWFuZ2xlLWxlZnRcIj48L2k+PC9idXR0b24+XG5cdFx0XHRcdDxzcGFuIHN0eWxlPVwibWFyZ2luLWxlZnQ6IDEwcHg7bWFyZ2luLXJpZ2h0OiAxMHB4O1wiPlBhZ2Uge3tjdXJyZW50UGFnZX19L3t7cGFnZXNOdW1iZXJ9fTwvc3Bhbj4gXG5cdFx0XHRcdDxzcGFuPiAgPC9zcGFuPlxuICAgICAgICA8c3BhbiBzdHlsZT1cIm1hcmdpbi1sZWZ0OiAxMHB4O21hcmdpbi1yaWdodDogMTBweDtcIj5TaXplPC9zcGFuPlxuICAgICAgICA8c2VsZWN0IGNsYXNzPVwiZm9ybS1jb250cm9sIGZvcm0tY29udHJvbC1zbSBwYWdlU2l6ZVNlbGVjdEJveFwiIGlkPVwiY3VycmVudFNpemVcIiBcbiAgICAgICAgICAgICAgICBuYW1lPVwiY3VycmVudFNpemVcIiBbKG5nTW9kZWwpXT1cImN1cnJlbnRTaXplXCIgKGNoYW5nZSk9XCJjaGFuZ2VTaXplKGN1cnJlbnRTaXplKVwiPlxuXHRcdFx0XHRcdDxvcHRpb24gKm5nRm9yPVwibGV0IHNpemUgb2Ygc2l6ZXNcIiB2YWx1ZT1cInt7c2l6ZX19XCI+e3tzaXplfX08L29wdGlvbj5cbiAgICAgICAgPC9zZWxlY3Q+XG5cdFx0XHRcdDxidXR0b24gY2xhc3M9J2J0biBidG4taW5mbyBidG4tc20gbS1sLTFlbScgKGNsaWNrKT1cIm5leHRQYWdlKClcIiBbZGlzYWJsZWRdPVwiY3VycmVudFBhZ2UgPT09IHBhZ2VzTnVtYmVyXCI+PGkgY2xhc3M9XCJmYSBmYS1hbmdsZS1yaWdodFwiPjwvaT48L2J1dHRvbj5cblx0XHRcdFx0PGJ1dHRvbiBjbGFzcz0nYnRuIGJ0bi1pbmZvIGJ0bi1zbSBtLWwtMWVtJyAoY2xpY2spPVwibGFzdFBhZ2UoKVwiIFtkaXNhYmxlZF09XCJjdXJyZW50UGFnZSA9PT0gcGFnZXNOdW1iZXJcIj48aSBjbGFzcz1cImZhIGZhLWFuZ2xlLWRvdWJsZS1yaWdodFwiPjwvaT48L2J1dHRvbj5cblx0XHRcdDwvZGl2PlxuXHQ8L2Rpdj5cbjwvZGl2PlxuICBgLFxuICBzdHlsZXM6IFtgXG4gIC5tLWwtMWVtIHsgXG4gICAgbWFyZ2luLWxlZnQ6MWVtOyBcbiAgICB3aWR0aDogMjVweDtcbiAgfVxuICBcbiAgLnBhZ2VTaXplU2VsZWN0Qm94IHtcbiAgICBkaXNwbGF5OiAtd2Via2l0LWlubGluZS1ib3g7XG4gICAgd2lkdGg6IDExJTtcbiAgICBwYWRkaW5nOiA1cHg7IFxuICB9XG4gIFxuICBgXVxufSlcbmV4cG9ydCBjbGFzcyBSc1BhZ2luYXRpb25Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIEBJbnB1dCgpIGl0ZW1zOiBBcnJheTxhbnk+O1xuICBASW5wdXQoKSBjdXJyZW50U2l6ZSA6IG51bWJlcjtcblxuICBjdXJyZW50UGFnZTogbnVtYmVyID0gMSA7XG4gIHBhZ2VzTnVtYmVyOiBudW1iZXIgO1xuXG4gIHB1YmxpYyBzaXplcyA9IFs1LCAxMCwgMjBdXG4gIFxuICBAT3V0cHV0KCkgY2hhbmdlUGFnZSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55Pih0cnVlKTtcblxuICBjb25zdHJ1Y3RvcigpIHsgfVxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZih0aGlzLml0ZW1zICYmIHRoaXMuaXRlbXMubGVuZ3RoKXtcbiAgICAgIHRoaXMucGFnZXNOdW1iZXIgPSBNYXRoLmNlaWwodGhpcy5pdGVtcy5sZW5ndGggLyB0aGlzLmN1cnJlbnRTaXplKSA7XG4gICAgICB0aGlzLnNldFBhZ2UodGhpcy5jdXJyZW50UGFnZSk7XG4gICAgfVxuICB9XG5cblxuICBsYXN0UGFnZSgpOiB2b2lkIHtcbiAgICB0aGlzLmN1cnJlbnRQYWdlID0gdGhpcy5wYWdlc051bWJlciA7IFxuICAgIHRoaXMuc2V0UGFnZSh0aGlzLmN1cnJlbnRQYWdlKTtcbiAgfVxuXG4gIGZpcnN0UGFnZSgpOiB2b2lkIHtcbiAgICB0aGlzLmN1cnJlbnRQYWdlID0gMSA7IFxuICAgIHRoaXMuc2V0UGFnZSh0aGlzLmN1cnJlbnRQYWdlKTtcbiAgfVxuXG4gIHByZXZpb3VzUGFnZSgpOiB2b2lkIHtcbiAgICB0aGlzLmN1cnJlbnRQYWdlID0gdGhpcy5jdXJyZW50UGFnZSAtIDEgO1xuICAgIHRoaXMuc2V0UGFnZSh0aGlzLmN1cnJlbnRQYWdlKTtcbiAgfVxuXG4gIG5leHRQYWdlKCk6IHZvaWQge1xuICAgIHRoaXMuY3VycmVudFBhZ2UgPSB0aGlzLmN1cnJlbnRQYWdlICsgMSA7XG4gICAgdGhpcy5zZXRQYWdlKHRoaXMuY3VycmVudFBhZ2UpO1xuICB9XG5cbiAgIGNoYW5nZVNpemUoc2l6ZTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5zZXRTaXplKHNpemUpO1xuICB9XG5cblxuICBwcml2YXRlIHNldFBhZ2UocGFnZTogbnVtYmVyKSB7XG4gICAgbGV0IHBhZ2VyID0gcGFnaW5hdGUodGhpcy5pdGVtcy5sZW5ndGgsIHBhZ2UsIHRoaXMuY3VycmVudFNpemUpO1xuICAgIHRoaXMuY3VycmVudFBhZ2UgPSBwYWdlci5jdXJyZW50UGFnZSA7XG4gICAgdGhpcy5wYWdlc051bWJlciA9IHBhZ2VyLnRvdGFsUGFnZXMgO1xuICAgIHZhciBwYWdlT2ZJdGVtcyA9IHRoaXMuaXRlbXMuc2xpY2UocGFnZXIuc3RhcnRJbmRleCwgcGFnZXIuZW5kSW5kZXggKyAxKTtcbiAgICB0aGlzLmNoYW5nZVBhZ2UuZW1pdChwYWdlT2ZJdGVtcyk7XG4gIH1cblxuICBwcml2YXRlIHNldFNpemUoc2l6ZTogbnVtYmVyKSB7XG4gICAgbGV0IHBhZ2VyID0gcGFnaW5hdGUodGhpcy5pdGVtcy5sZW5ndGgsIHRoaXMuY3VycmVudFBhZ2UgLHNpemUpO1xuICAgIHRoaXMuY3VycmVudFBhZ2UgPSBwYWdlci5jdXJyZW50UGFnZSA7XG4gICAgdGhpcy5wYWdlc051bWJlciA9IHBhZ2VyLnRvdGFsUGFnZXMgO1xuICAgIHZhciBwYWdlT2ZJdGVtcyA9IHRoaXMuaXRlbXMuc2xpY2UocGFnZXIuc3RhcnRJbmRleCwgcGFnZXIuZW5kSW5kZXggKyAxKTtcbiAgICB0aGlzLmNoYW5nZVBhZ2UuZW1pdChwYWdlT2ZJdGVtcyk7XG4gIH1cblxufVxuIl19