import { Injectable, Component, EventEmitter, Input, Output, NgModule, defineInjectable } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class RsPaginationLibService {
    constructor() { }
}
RsPaginationLibService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
RsPaginationLibService.ctorParameters = () => [];
/** @nocollapse */ RsPaginationLibService.ngInjectableDef = defineInjectable({ factory: function RsPaginationLibService_Factory() { return new RsPaginationLibService(); }, token: RsPaginationLibService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * #### Pagination within API RSET
 *
 * Author : romdhanisamir94\@gmail.com
 */
class RsPaginationLibComponent {
    /**
     * @param {?} activatedRoute
     * @param {?} router
     */
    constructor(activatedRoute, router) {
        this.activatedRoute = activatedRoute;
        this.router = router;
        this.sizes = [5, 10, 20];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    lastPage() {
        this.router.navigate([], {
            relativeTo: this.activatedRoute,
            queryParams: { page: this.pagesNumber },
            queryParamsHandling: "merge"
        });
    }
    /**
     * @return {?}
     */
    firstPage() {
        this.router.navigate([], {
            relativeTo: this.activatedRoute,
            queryParams: { page: 1 },
            queryParamsHandling: "merge"
        });
    }
    /**
     * @return {?}
     */
    previousPage() {
        this.router.navigate([], {
            relativeTo: this.activatedRoute,
            queryParams: { page: --this.page },
            queryParamsHandling: "merge"
        });
    }
    /**
     * @return {?}
     */
    nextPage() {
        this.router.navigate([], {
            relativeTo: this.activatedRoute,
            queryParams: { page: ++this.page },
            queryParamsHandling: "merge"
        });
    }
    /**
     * @return {?}
     */
    changeSize() {
        this.router.navigate([], {
            relativeTo: this.activatedRoute,
            queryParams: { size: this.currentSize },
            queryParamsHandling: "merge"
        });
    }
}
RsPaginationLibComponent.decorators = [
    { type: Component, args: [{
                selector: 'rs-pagination-api',
                template: `
  <div *ngIf="pagesNumber >= 1">
	<div class="row">
			<div class="col-md-12">
				<button class='btn btn-info btn-sm m-l-1em' (click)="firstPage()" [disabled]="page === 1"><i class="fa fa-angle-double-left"></i></button>
				<button class='btn btn-info btn-sm m-l-1em' (click)="previousPage()" [disabled]="page == 1"><i class="fa fa-angle-left"></i></button>
				<span style="margin-left: 10px;margin-right: 10px;">Page {{page}}/{{pagesNumber}}</span> 
				<span>  </span>
        <span style="margin-left: 10px;margin-right: 10px;">Size</span>
				<select class="form-control form-control-sm pageSizeSelectBox" id="currentSize" name="currentSize" [(ngModel)]="currentSize" (change)="changeSize()">
					<option *ngFor="let size of sizes" value="{{size}}">{{size}}</option>
        </select>
				<button class='btn btn-info btn-sm m-l-1em' (click)="nextPage()" [disabled]="page === pagesNumber"><i class="fa fa-angle-right"></i></button>
				<button class='btn btn-info btn-sm m-l-1em' (click)="lastPage()" [disabled]="page === pagesNumber"><i class="fa fa-angle-double-right"></i></button>
			</div>
	</div>
</div>
  `,
                styles: [`
  .m-l-1em { 
    margin-left:1em; 
    width: 25px;
  }
  
  .pageSizeSelectBox {
    display: -webkit-inline-box;
    width: 11%;
    padding: 5px; 
  }
  
  `]
            }] }
];
/** @nocollapse */
RsPaginationLibComponent.ctorParameters = () => [
    { type: ActivatedRoute },
    { type: Router }
];
RsPaginationLibComponent.propDecorators = {
    page: [{ type: Input }],
    pagesNumber: [{ type: Input }],
    currentSize: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @param {?} totalItems
 * @param {?=} currentPage
 * @param {?=} pageSize
 * @param {?=} maxPages
 * @return {?}
 */
function paginate(totalItems, currentPage = 1, pageSize = 5, maxPages = 10) {
    /** @type {?} */
    let totalPages = Math.ceil(totalItems / pageSize);
    // ensure current page isn't out of range
    if (currentPage < 1) {
        currentPage = 1;
    }
    else if (currentPage > totalPages) {
        currentPage = totalPages;
    }
    /** @type {?} */
    let startPage;
    /** @type {?} */
    let endPage;
    if (totalPages <= maxPages) {
        // total pages less than max so show all pages
        startPage = 1;
        endPage = totalPages;
    }
    else {
        /** @type {?} */
        let maxPagesBeforeCurrentPage = Math.floor(maxPages / 2);
        /** @type {?} */
        let maxPagesAfterCurrentPage = Math.ceil(maxPages / 2) - 1;
        if (currentPage <= maxPagesBeforeCurrentPage) {
            // current page near the start
            startPage = 1;
            endPage = maxPages;
        }
        else if (currentPage + maxPagesAfterCurrentPage >= totalPages) {
            // current page near the end
            startPage = totalPages - maxPages + 1;
            endPage = totalPages;
        }
        else {
            // current page somewhere in the middle
            startPage = currentPage - maxPagesBeforeCurrentPage;
            endPage = currentPage + maxPagesAfterCurrentPage;
        }
    }
    /** @type {?} */
    let startIndex = (currentPage - 1) * pageSize;
    /** @type {?} */
    let endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);
    /** @type {?} */
    let pages = Array.from(Array((endPage + 1) - startPage).keys()).map(i => startPage + i);
    // return object with all pager properties required by the view
    return {
        totalItems: totalItems,
        currentPage: currentPage,
        pageSize: pageSize,
        totalPages: totalPages,
        startPage: startPage,
        endPage: endPage,
        startIndex: startIndex,
        endIndex: endIndex,
        pages: pages
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * #### Pagination without API RSET
 *
 * Author : romdhanisamir94\@gmail.com
 */
class RsPaginationComponent {
    constructor() {
        this.currentPage = 1;
        this.sizes = [5, 10, 20];
        this.changePage = new EventEmitter(true);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.items && this.items.length) {
            this.pagesNumber = Math.ceil(this.items.length / this.currentSize);
            this.setPage(this.currentPage);
        }
    }
    /**
     * @return {?}
     */
    lastPage() {
        this.currentPage = this.pagesNumber;
        this.setPage(this.currentPage);
    }
    /**
     * @return {?}
     */
    firstPage() {
        this.currentPage = 1;
        this.setPage(this.currentPage);
    }
    /**
     * @return {?}
     */
    previousPage() {
        this.currentPage = this.currentPage - 1;
        this.setPage(this.currentPage);
    }
    /**
     * @return {?}
     */
    nextPage() {
        this.currentPage = this.currentPage + 1;
        this.setPage(this.currentPage);
    }
    /**
     * @param {?} size
     * @return {?}
     */
    changeSize(size) {
        this.setSize(size);
    }
    /**
     * @param {?} page
     * @return {?}
     */
    setPage(page) {
        /** @type {?} */
        let pager = paginate(this.items.length, page, this.currentSize);
        this.currentPage = pager.currentPage;
        this.pagesNumber = pager.totalPages;
        /** @type {?} */
        var pageOfItems = this.items.slice(pager.startIndex, pager.endIndex + 1);
        this.changePage.emit(pageOfItems);
    }
    /**
     * @param {?} size
     * @return {?}
     */
    setSize(size) {
        /** @type {?} */
        let pager = paginate(this.items.length, this.currentPage, size);
        this.currentPage = pager.currentPage;
        this.pagesNumber = pager.totalPages;
        /** @type {?} */
        var pageOfItems = this.items.slice(pager.startIndex, pager.endIndex + 1);
        this.changePage.emit(pageOfItems);
    }
}
RsPaginationComponent.decorators = [
    { type: Component, args: [{
                selector: 'rs-pagination',
                template: `
  <div>
	<div class="row">
			<div class="col-md-12">
				<button class='btn btn-info btn-sm m-l-1em' (click)="firstPage()" [disabled]="currentPage === 1"><i class="fa fa-angle-double-left"></i></button>
				<button class='btn btn-info btn-sm m-l-1em' (click)="previousPage()" [disabled]="currentPage == 1"><i class="fa fa-angle-left"></i></button>
				<span style="margin-left: 10px;margin-right: 10px;">Page {{currentPage}}/{{pagesNumber}}</span> 
				<span>  </span>
        <span style="margin-left: 10px;margin-right: 10px;">Size</span>
        <select class="form-control form-control-sm pageSizeSelectBox" id="currentSize" 
                name="currentSize" [(ngModel)]="currentSize" (change)="changeSize(currentSize)">
					<option *ngFor="let size of sizes" value="{{size}}">{{size}}</option>
        </select>
				<button class='btn btn-info btn-sm m-l-1em' (click)="nextPage()" [disabled]="currentPage === pagesNumber"><i class="fa fa-angle-right"></i></button>
				<button class='btn btn-info btn-sm m-l-1em' (click)="lastPage()" [disabled]="currentPage === pagesNumber"><i class="fa fa-angle-double-right"></i></button>
			</div>
	</div>
</div>
  `,
                styles: [`
  .m-l-1em { 
    margin-left:1em; 
    width: 25px;
  }
  
  .pageSizeSelectBox {
    display: -webkit-inline-box;
    width: 11%;
    padding: 5px; 
  }
  
  `]
            }] }
];
/** @nocollapse */
RsPaginationComponent.ctorParameters = () => [];
RsPaginationComponent.propDecorators = {
    items: [{ type: Input }],
    currentSize: [{ type: Input }],
    changePage: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Author : romdhanisamir94\@gmail.com
 */
class RsPaginationModule {
}
RsPaginationModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    RsPaginationLibComponent,
                    RsPaginationComponent
                ],
                imports: [
                    CommonModule,
                    FormsModule
                ],
                exports: [
                    RsPaginationLibComponent,
                    RsPaginationComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { RsPaginationLibService, RsPaginationLibComponent, RsPaginationModule, RsPaginationComponent as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,